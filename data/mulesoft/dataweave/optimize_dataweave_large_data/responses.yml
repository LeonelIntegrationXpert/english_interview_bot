responses:
  utter_optimize_dataweave_large_data:
    - custom:
        response_array:
          -
            - vr_pt: |
                ðŸš€ *OtimizaÃ§Ã£o de Scripts DataWeave para Grandes Volumes*  
                Trabalhar com grandes volumes de dados no **DataWeave** exige atenÃ§Ã£o Ã  **performance e uso eficiente de memÃ³ria**.
                ðŸ“Œ **Boas prÃ¡ticas para otimizaÃ§Ã£o:**  
                - Evite `map` ou `filter` desnecessÃ¡rios em grandes listas  
                - Prefira **transformaÃ§Ãµes diretas** em vez de mÃºltiplos encadeamentos  
                - Utilize **funÃ§Ãµes especÃ­ficas** como `pluck`, `groupBy` ou `reduce` com cautela  
                - Use `as` para **converter tipos com seguranÃ§a**, evitando erros que quebram a execuÃ§Ã£o  
                - Aproveite `dw::util::Values::flatten` para simplificar estruturas aninhadas  
                - Minimize o uso de `if` encadeados â€” use `when` com `match` para melhorar legibilidade e performance
                âœ… *Resumo:*  
                Para grandes volumes, mantenha o script **simples, direto e modular**. Testar com exemplos reais e usar ferramentas como o profiler do Anypoint Studio ajuda a identificar gargalos.

            - vr_en: |
                ðŸš€ *Optimizing DataWeave Scripts for Large Data Volumes*  
                When working with heavy payloads, **DataWeave performance** can be impacted if not carefully structured.
                ðŸ“Œ **Best practices for optimization:**  
                - Avoid unnecessary `map` or `filter` calls on large arrays  
                - Prefer **direct transformations** over chained operations  
                - Use powerful functions like `pluck`, `groupBy`, and `reduce` wisely  
                - Apply `as` to **safely cast data types**, preventing type errors  
                - Flatten nested structures using `dw::util::Values::flatten`  
                - Replace multiple `if` statements with clean `match` expressions for readability and speed
                âœ… *Summary:*  
                Keep your script **clean, concise, and modular**. Test with real data samples and leverage tools like the Anypoint Studio profiler to catch performance bottlenecks.
