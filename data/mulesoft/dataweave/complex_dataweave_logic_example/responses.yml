responses:
  utter_complex_dataweave_logic_example:
    - custom:
        response_array:
          -
            - vr_pt: |
                ğŸ§  *Exemplo real com lÃ³gica complexa no DataWeave*  
                Em um projeto de integraÃ§Ã£o com Salesforce, recebi uma lista de **pedidos de venda** contendo mÃºltiplos itens por pedido.  
                Para preparar o payload para uma API externa, precisei usar:
                ğŸ”¸ `groupBy` â†’ Para agrupar os itens por nÃºmero de pedido  
                ğŸ”¸ `flatten` â†’ Para achatar listas aninhadas apÃ³s transformaÃ§Ã£o  
                ğŸ”¸ `mapObject` + lÃ³gica condicional â†’ Para organizar os blocos por tipo de item
                ğŸ§ª **Desafio:**  
                A API de destino esperava os itens agrupados por categoria e com campos normalizados. AlÃ©m disso, havia casos em que alguns itens vinham nulos e precisavam ser filtrados.
                ğŸ“Œ **SoluÃ§Ã£o:**  
                Usei `groupBy` para agrupar por `category`, `filter` para remover nulos, e `flatten` para reorganizar a saÃ­da. No final, a transformaÃ§Ã£o consolidava todos os dados em uma estrutura limpa, pronta para envio.
                âœ… *Resumo:*  
                O DataWeave foi essencial para aplicar uma lÃ³gica **de agrupamento, limpeza e reestruturaÃ§Ã£o** que evitou retrabalho e garantiu compatibilidade com a API externa.

            - vr_en: |
                ğŸ§  *Real example with complex logic in DataWeave*  
                In a Salesforce integration project, I received a list of **sales orders** where each order had multiple items.  
                To prepare the payload for an external API, I had to use:
                ğŸ”¸ `groupBy` â†’ To group items by order number  
                ğŸ”¸ `flatten` â†’ To simplify nested arrays after transformations  
                ğŸ”¸ `mapObject` + conditional logic â†’ To organize items by type
                ğŸ§ª **Challenge:**  
                The destination API expected items grouped by category and formatted fields. There were also cases with `null` values that needed to be filtered out.
                ğŸ“Œ **Solution:**  
                I used `groupBy` on `category`, `filter` to remove `null` entries, and `flatten` to reshape the final output. This ensured the payload was clean and API-ready.
                âœ… *Summary:*  
                DataWeave allowed me to apply **grouping, filtering, and transformation** logic in a powerful way, improving efficiency and ensuring external system compatibility.
