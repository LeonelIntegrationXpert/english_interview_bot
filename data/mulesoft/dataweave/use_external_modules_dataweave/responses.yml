responses:
  utter_use_external_modules_dataweave:
    - custom:
        response_array:
          -
            - vr_pt: |
                üì¶ *Uso de m√≥dulos e bibliotecas externas no DataWeave*  
                Sim, j√° utilizei **m√≥dulos externos** em projetos com DataWeave para **reutilizar fun√ß√µes personalizadas**. Isso √© muito √∫til quando precisamos aplicar **valida√ß√µes, c√°lculos ou transforma√ß√µes comuns** em v√°rios scripts.
                üîπ Para usar, criamos um arquivo `.dwl` separado com fun√ß√µes e depois usamos o comando `import` no in√≠cio do script principal.  
                Exemplo:
                ```dw
                import * from dw::utils::meuModulo
                ```
                Isso melhora a **manuten√ß√£o**, **organiza√ß√£o** e **reutiliza√ß√£o** do c√≥digo, al√©m de deixar os scripts mais limpos.
                ‚úÖ *Resumo:*  
                Reutilizar m√≥dulos externos no DataWeave traz **padroniza√ß√£o**, **clareza** e evita duplica√ß√£o de l√≥gica entre APIs.
            - vr_en: |
                üì¶ *Using external modules and libraries in DataWeave*  
                Yes, I‚Äôve used **external modules** in DataWeave projects to **reuse custom functions**. This is extremely helpful for **validations, transformations, or business rules** shared across multiple scripts.
                üîπ You define these functions in a separate `.dwl` file and then import them using the `import` keyword.  
                Example:
                ```dw
                import * from dw::utils::myModule
                ```
                This makes your codebase more **maintainable**, **modular**, and **reusable**, keeping your main scripts clean.
                ‚úÖ *Summary:*  
                Reusing external modules in DataWeave improves **consistency**, **readability**, and reduces logic duplication across APIs.
