responses:
  utter_difference_type_format_string:
    - custom:
        response_array:
          -
            - vr_pt: |
                ðŸ§  *DiferenÃ§a entre `:type` e `String {format:...}` no DataWeave*  
                Em DataWeave, ambos servem para definir tipos, mas com **propÃ³sitos diferentes**:
                ðŸ”¹ **`:type` (anotaÃ§Ã£o simples de tipo)**  
                Usado para indicar o tipo bÃ¡sico do valor, como `: String`, `: Number`, `: Boolean`, etc.  
                Exemplo:  
                ```dw
                payload.nome as String
                ```
                ðŸ”¸ **`String {format:...}` (metadado adicional de tipo)**  
                Define **um tipo com restriÃ§Ãµes ou formatos esperados**. Muito usado com tipos como datas ou campos que precisam de validaÃ§Ã£o.  
                Exemplo:  
                ```dw
                tipo: String { format: "date-time" }
                ```
                ðŸ“Œ *Resumo:*  
                - `:type` â†’ apenas declara o tipo de dado  
                - `String {format:}` â†’ adiciona **metadados sobre o formato** esperado  
                Usar o `format` ajuda a validar e documentar dados de entrada ou saÃ­da de forma mais precisa.

            - vr_en: |
                ðŸ§  *Difference between `:type` and `String {format:...}` in DataWeave*  
                In DataWeave, both are used to define types, but for **different purposes**:
                ðŸ”¹ **`:type` (basic type annotation)**  
                It declares the data type, like `: String`, `: Number`, `: Boolean`, etc.  
                Example:  
                ```dw
                payload.name as String
                ```
                ðŸ”¸ **`String {format:...}` (type with metadata)**  
                It defines a **type with additional formatting rules or validation hints**. Often used for dates or structured strings.  
                Example:  
                ```dw
                type: String { format: "date-time" }
                ```
                ðŸ“Œ *Summary:*  
                - `:type` â†’ declares the basic type  
                - `String {format:}` â†’ adds **metadata about the expected format**  
                Using `format` is useful for validation, documentation, and stricter API definitions.
