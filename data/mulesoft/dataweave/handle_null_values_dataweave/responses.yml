responses:
  utter_handle_null_values_dataweave:
    - custom:
        response_array:
          -
            - vr_pt: |
                üõ°Ô∏è *Como tornar o script resiliente a valores `null`?*  
                Para evitar erros no DataWeave causados por valores nulos, √© importante aplicar boas pr√°ticas de **tratamento preventivo**:
                ‚úÖ **1. Usar o operador `default`**  
                Substitui o valor `null` por um valor seguro.  
                Ex: `payload.nome default "Desconhecido"`
                ‚úÖ **2. Verifica√ß√£o com `if`, `when`, `is`, `!= null`**  
                Impede que fun√ß√µes sejam aplicadas em `null`.  
                Ex: `if (payload.valor != null) upper(payload.valor)`
                ‚úÖ **3. Fun√ß√µes como `coalesce()`**  
                Retorna o primeiro valor n√£o-nulo da lista.  
                Ex: `coalesce(payload.a, payload.b, "vazio")`
                ‚úÖ **Resumo:**  
                A chave est√° em **verificar antes de aplicar fun√ß√µes** e sempre garantir um valor alternativo para evitar falhas de tempo de execu√ß√£o.

            - vr_en: |
                üõ°Ô∏è *How to make your DataWeave script resilient to `null` values?*  
                To avoid runtime errors caused by `null`, follow these good practices for **defensive scripting**:
                ‚úÖ **1. Use the `default` operator**  
                Replaces `null` with a safe fallback value.  
                Ex: `payload.name default "Unknown"`
                ‚úÖ **2. Check with `if`, `when`, `is`, or `!= null`**  
                Prevents functions from being applied to `null`.  
                Ex: `if (payload.value != null) upper(payload.value)`
                ‚úÖ **3. Use `coalesce()`**  
                Returns the first non-null value.  
                Ex: `coalesce(payload.a, payload.b, "empty")`
                ‚úÖ **Summary:**  
                The key is to **check before using a value** and always provide a fallback to avoid breaking the flow at runtime.
