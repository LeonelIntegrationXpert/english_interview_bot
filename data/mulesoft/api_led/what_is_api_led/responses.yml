version: '3.1'
responses:
  utter_what_is_api_led:
    - custom:
        vr_pt: |
          A arquitetura conhecida como API-led organiza as interfaces de programação de aplicações, chamadas APIs, em três camadas distintas e bem definidas, com o objetivo principal de promover o reaproveitamento de componentes, facilitar a governança e aumentar a escalabilidade dos sistemas integrados. A primeira camada é a Camada de Sistema, que tem a responsabilidade de conectar e acessar diretamente os sistemas legados, bancos de dados, serviços internos e outras fontes de dados. Essa camada funciona como uma ponte entre as tecnologias antigas e os novos sistemas, garantindo que as informações sejam disponibilizadas de forma consistente e segura para as camadas superiores. A segunda camada é a Camada de Processo. Nela, ocorre a aplicação da lógica de negócio, onde as informações coletadas na Camada de Sistema são transformadas, agregadas e manipuladas para atender aos requisitos específicos do negócio. Esta camada pode orquestrar fluxos de dados complexos, realizar validações, cálculos e integrações entre diferentes serviços, garantindo que a informação seja adequada para o uso final. A terceira e última camada é a Camada de Experiência, que disponibiliza APIs específicas e personalizadas para diferentes canais de interação, como websites, aplicações móveis, portais de parceiros ou dispositivos IoT. Essa camada adapta os dados e funcionalidades para as necessidades particulares de cada tipo de usuário ou dispositivo, proporcionando uma experiência consistente e eficiente. Entre as principais vantagens da arquitetura API-led estão o reaproveitamento efetivo de APIs, o que reduz retrabalho e aumenta a produtividade; a clara separação de responsabilidades entre as camadas, que facilita a manutenção e evolução dos sistemas; o controle centralizado das políticas de segurança e monitoramento, assegurando conformidade e rastreabilidade; e a possibilidade de escalar independentemente cada camada, permitindo que a infraestrutura acompanhe o crescimento do negócio. Exemplos práticos dessa arquitetura incluem a integração de sistemas antigos com novas soluções baseadas em microserviços, o fornecimento de dados em tempo real para aplicativos móveis que exigem alta performance, e a coordenação de processos empresariais complexos que envolvem múltiplas fontes de dados e diferentes tipos de usuários.
        vr_en: |
          The architecture known as API-led organizes application programming interfaces, called APIs, into three distinct and well-defined layers, with the main goal of promoting component reuse, facilitating governance, and increasing the scalability of integrated systems. The first layer is the System Layer, which is responsible for directly connecting to and accessing legacy systems, databases, internal services, and other data sources. This layer acts as a bridge between old technologies and new systems, ensuring that information is made available consistently and securely to the upper layers. The second layer is the Process Layer. In this layer, business logic is applied where information gathered in the System Layer is transformed, aggregated, and manipulated to meet specific business requirements. This layer can orchestrate complex data flows, perform validations, calculations, and integrations between different services, ensuring the information is suitable for final use. The third and final layer is the Experience Layer, which provides specific and customized APIs for different interaction channels such as websites, mobile applications, partner portals, or IoT devices. This layer adapts data and functionalities to the particular needs of each type of user or device, providing a consistent and efficient experience. Among the main advantages of API-led architecture are effective API reuse, which reduces rework and increases productivity; clear separation of responsibilities between layers, facilitating maintenance and system evolution; centralized control of security policies and monitoring, ensuring compliance and traceability; and the ability to independently scale each layer, allowing the infrastructure to keep pace with business growth. Practical examples of this architecture include integrating legacy systems with new microservices-based solutions, providing real-time data to mobile applications requiring high performance, and coordinating complex business processes involving multiple data sources and different types of users.
    - custom:
        vr_pt: |
          A arquitetura denominada API-led baseia-se em princípios de modularidade, reutilização e governança de APIs, organizando as interfaces de programação em três camadas claramente separadas. Na primeira camada, chamada Camada de Sistema, as APIs encapsulam o acesso a sistemas legados, bancos de dados, serviços internos e qualquer outra fonte de informação. Essa camada padroniza protocolos, formatos e autenticação, garantindo segurança e consistência de dados antes de expô-los às camadas superiores. Na segunda camada, denominada Camada de Processo, as APIs realizam a aplicação da lógica de negócio. Aqui são implementadas regras de validação, transformações de dados, agregações e orquestrações de atividades entre múltiplos sistemas. Essa camada permite compor funcionalidades a partir das APIs de sistema, criando serviços de negócio que podem ser versionados e reutilizados em diferentes fluxos. A terceira camada é a Camada de Experiência. Nela as APIs são adaptadas para os diferentes canais de consumo, como portais web, aplicações móveis, chatbots, dispositivos de internet das coisas ou integrações com parceiros. Essa personalização inclui ajustes de formato de resposta, filtros de dados e restrições de escopo, de modo a entregar exatamente o que cada consumidor necessita, com mínima latência e alto desempenho. Entre os benefícios mais importantes da arquitetura API-led estão a separação clara de responsabilidades, que facilita a manutenção e a evolução dos serviços; o reaproveitamento de componentes, reduzindo retrabalho e custos de desenvolvimento; a governança centralizada, que unifica políticas de segurança, controle de versionamento e monitoramento de uso; e a escalabilidade independente, permitindo ajustar recursos computacionais de cada camada conforme as demandas de tráfego e processamento. Exemplos de aplicação incluem a criação de uma API de sistema que expõe dados de um sistema financeiro legado, uma API de processo que calcula indicadores de crédito e concatena informações de várias fontes, e uma API de experiência que fornece somente os resultados relevantes para um aplicativo móvel de consulta de saldo.
        vr_en: |
          The architecture known as API-led is based on principles of modularity, reuse, and API governance, organizing programming interfaces into three distinct layers. The first layer, called the System Layer, encapsulates access to legacy systems, databases, internal services, and any other source of information. This layer standardizes protocols, formats, and authentication, ensuring data security and consistency before exposing it to higher layers. The second layer, called the Process Layer, applies business logic. Here, validation rules are enforced, data transformations and aggregations are performed, and activities are orchestrated across multiple systems. This layer enables the composition of system APIs into versioned, reusable business services that can be leveraged across different workflows. The third layer is the Experience Layer. In this layer, APIs are tailored for various consumption channels such as web portals, mobile applications, chatbots, Internet of Things devices, or partner integrations. This customization includes response formatting, data filtering, and scope restrictions, delivering exactly what each consumer requires with minimal latency and high performance. Among the most important benefits of API-led architecture are clear separation of responsibilities, which simplifies service maintenance and evolution; component reuse, reducing rework and development costs; centralized governance, unifying security policies, version control, and usage monitoring; and independent scalability, allowing compute resources for each layer to be adjusted according to traffic and processing demands. Application examples include creating a system API that exposes data from a legacy financial system, a process API that calculates credit indicators and aggregates information from various sources, and an experience API that delivers only the relevant results to a mobile balance inquiry app.
    - custom:
        vr_pt: |
          A arquitetura denominada API-led organiza as interfaces de programação de aplicações, conhecidas como APIs, em três camadas distintas para promover modularidade, governança e reutilização de componentes em todo o ciclo de vida da integração. Cada camada tem responsabilidades específicas e deve ser projetada, documentada e versionada de forma independente, garantindo clareza de escopo e facilidade de manutenção. A primeira camada, chamada Camada de Sistema, encapsula o acesso a sistemas legados, bancos de dados, filas de mensagem, serviços internos e quaisquer outras fontes de dados corporativos. Nesta camada são padronizados protocolos de comunicação, formatos de dados e mecanismos de autenticação e autorização, de modo a mascarar a complexidade dos sistemas originais e expor apenas interfaces seguras e consistentes para as camadas superiores. A segunda camada, denominada Camada de Processo, implementa a lógica de negócio central. Aqui são aplicadas regras de validação, transformações, enriquecimento de dados, chamadas paralelas a múltiplas APIs de sistema e orquestrações de fluxo, criando serviços de processo que atendem a requisitos funcionais específicos. Esta camada deve ser desenvolvida com foco em idempotência, confiabilidade e rastreabilidade, garantindo que cada etapa seja monitorada, registrada em logs estruturados e controlada quanto a falhas e repetições. A terceira camada, a Camada de Experiência, adapta as APIs de processo para os diferentes canais de consumo, como portais web, aplicativos móveis, chatbots, painéis analíticos e dispositivos de Internet das Coisas. Nesta camada customizam-se modelos de dados, aplica-se filtragem de informações sensíveis, definem-se limites de taxa de chamadas e configuram-se políticas de cache para otimizar desempenho e reduzir latência, sempre com foco em entregar a melhor experiência ao usuário final. Entre os principais benefícios dessa abordagem estão a reutilização sistemática de APIs de sistema e de processo, que diminui duplicação de esforço; a separação clara de responsabilidades, que facilita testes, atualizações e governança; o controle centralizado de políticas de segurança, versionamento e monitoramento de uso; e a escalabilidade independente de cada camada, permitindo alocar recursos de infraestrutura conforme picos de carga ou requisitos de desempenho de cada etapa. Para garantir qualidade e estabilidade, recomenda-se documentar cada API em um portal centralizado, definir contratos claros usando especificações OpenAPI e RAML, automatizar testes unitários e de integração em pipelines de CI CD e aplicar políticas de observabilidade que capturem métricas de tempo de resposta, taxa de erros e volume de transações. Exemplos de aplicação incluem uma API de sistema que normaliza dados de um ERP legado, uma API de processo que calcula indicadores de risco financeiro e agrega informações de diversas fontes e uma API de experiência que fornece apenas os dados necessários para um aplicativo de gestão de despesas em dispositivos móveis.
        vr_en: |
          The architecture called API led puts application programming interfaces into three separate layers to make reuse easier, enforce governance, and keep components modular throughout the integration life cycle. Each layer has its own job and you design, document, and version them on their own to make scope clear and maintenance simpler. The first layer is the system layer. This layer handles access to old systems, databases, message queues, internal services, and any other data source. It standardizes how systems talk, the format of data, and how users prove they have permission. This makes complex systems look simple and safe for the next layers. The second layer is the process layer. Here the core business rules run. The system layer data is checked, changed, and enriched. The process layer can call many system APIs at once, combine their results, and create new services that meet exact business needs. This layer focuses on making each step repeatable, reliable, and traceable, so you always know what happened when and can retry if something fails. The third layer is the experience layer. It adapts process APIs for channels like web portals, mobile apps, chatbots, analytics dashboards, and Internet of Things devices. This layer reshapes data, hides sensitive details, sets limits on calls, and adds caching to boost speed and cut delay. It delivers exactly what each user or device needs for the best experience. Key benefits of API led include using the same system and process APIs over and over to save work, clear separation of tasks for easier testing and updates, central control of security rules and versioning, and the ability to scale each layer on its own based on traffic or processing needs. To keep quality high and systems stable, document every API in a central portal, write clear contracts with OpenAPI or RAML, automate unit and integration tests in CI CD pipelines, and add observability rules to track response times, error rates, and transaction volume. Real examples include a system API that cleans up data from an old ERP, a process API that calculates financial risk scores from many sources, and an experience API that shows only the needed data in a mobile expense app.
    - custom:
        vr_pt: |
          A arquitetura API led organiza as interfaces de programação de aplicações em três camadas distintas para melhorar o reaproveitamento de código, promover políticas de segurança consistentes e permitir que cada parte do sistema evolua de forma independente. A primeira camada é a camada de sistema. Nesta etapa, as APIs de sistema conectam-se diretamente a fontes de dados, como sistemas legados, bancos de dados e filas de mensagem. Toda a complexidade desses sistemas é ocultada, pois a camada de sistema padroniza a forma de transporte dos dados, o formato das informações e os métodos de autenticação, garantindo que as camadas superiores recebam sempre informação segura, confiável e consistente. A segunda camada é a camada de processo. Aqui, as APIs de processo aplicam as regras centrais de negócio ao orquestrar dados de várias APIs de sistema, realizando validações, transformações, cálculos e combinando resultados em fluxos de trabalho unificados. Esta camada deve suportar repetição segura de operações, registrar cada etapa em registros estruturados e tratar erros automaticamente, para que os serviços permaneçam estáveis em diferentes condições de operação. A terceira camada é a camada de experiência. Nela, as APIs são ajustadas para atender às necessidades dos usuários finais em portais web, aplicações móveis, chat bots ou dispositivos de internet das coisas. Esta camada adapta o formato de resposta, oculta dados sensíveis, impõe limites de uso e aplica políticas de cache para acelerar o desempenho e reduzir atrasos, assegurando que a interação final seja rápida e fluida. Um dos principais benefícios da abordagem API led é o reaproveitamento sistemático das APIs de sistema e de processo, o que reduz trabalho repetitivo e acelera a entrega de novas funcionalidades. As equipes podem concentrar-se na lógica de negócio sem se preocupar em como acessar fontes de dados ou adaptar interfaces para diferentes tipos de clientes. Outro benefício importante é a separação clara de responsabilidades. Cada camada foca em uma preocupação específica, tornando a manutenção mais simples, rápida e menos sujeita a erros. As equipes podem atualizar políticas de segurança em um só lugar sem afetar a lógica de negócio, e melhorar a experiência do usuário sem interferir nas integrações de dados centrais. A aplicação centralizada de políticas também é uma grande vantagem. Na camada de sistema, podem ser definidas regras de autenticação e autorização de forma uniforme; na camada de processo, regras de validação padronizadas; e na camada de experiência, limites de taxa, cache e políticas de registro. Esse modelo de governança unificado garante conformidade e rastreabilidade em todo o ambiente de integração. A escalabilidade independente de cada camada permite alocar recursos de infraestrutura onde mais se necessita. Por exemplo, quando há picos no volume de dados, a camada de sistema pode ser expandida sem impactar a camada de experiência; quando cresce o tráfego de usuários, basta escalar a camada de experiência sem duplicar a lógica de processo. Para implementar a arquitetura API led com sucesso, recomenda-se documentar cada API em um portal centralizado usando especificações como OpenAPI ou RAML, automatizar testes unitários e de integração em pipelines de integração contínua e entrega contínua, e adotar práticas de observabilidade que capturem métricas de tempo de resposta, taxa de erros e volume de transações. Acordos de nível de serviço devem ser definidos para cada API e monitorados em tempo real, de modo a identificar gargalos de desempenho e planejar ajustes de capacidade. Exemplos práticos incluem uma API de sistema que normaliza e valida dados de um sistema de planejamento de recursos corporativos mais antigo, uma API de processo que calcula indicadores de risco combinando informações de sistemas internos e serviços de terceiros, e uma API de experiência que fornece apenas os dados relevantes para uma aplicação móvel de controle de despesas, garantindo uma experiência de usuário eficiente e sem interrupções.
        vr_en: |
          The API led architecture organizes application programming interfaces into three separate layers to improve code reuse foster consistent security policies and allow each part of the system to grow independently. The first layer is the system layer In this layer system apis connect directly to data sources such as legacy systems databases and message queues All the complexity of these sources is hidden because the system layer standardizes the way data travels the format of the data and the methods used for authentication so that the layers above always work with secure reliable and consistent information. The second layer is the process layer Here process apis apply core business rules by orchestrating data from multiple system apis performing checks transformations calculations and combining results into unified workflows This layer must support safe repetition log each step in structured logs and handle errors automatically so that services remain reliable under varying conditions. The third layer is the experience layer In this layer apis are shaped to meet the needs of end users through web portals mobile applications chatbots or internet of things devices This layer adjusts response formats hides sensitive data enforces usage limits and uses caching strategies to speed up performance and reduce delays ensuring that the final user interaction remains smooth and fast. A key benefit of the API led approach is the systematic reuse of system and process apis which reduces repeated work and accelerates the delivery of new features Teams can develop business logic without worrying about how to connect to data sources or how to adapt to multiple client interfaces. Another important benefit is the clear separation of responsibilities Each layer focuses on a specific concern making maintenance easier faster and less prone to errors Teams can update security policies in one place without impacting business logic and can enhance user experience without touching core data integrations. Centralized policy enforcement is also a major advantage In the system layer authentication and authorization rules can be managed consistently and in the process layer validation rules applied uniformly and in the experience layer rate limiting caching and logging policies can be enforced reliably This unified governance model ensures compliance and traceability across the entire integration landscape. Independent scalability of each layer allows infrastructure resources to be allocated where they are needed most For example when data volumes spike the system layer can be scaled out without affecting the experience layer and when user traffic grows the experience layer can be expanded without duplicating process logic. To implement API led successfully it is recommended to document each API in a centralized portal using openapi or raml specifications Automate unit tests and integration tests in continuous integration and delivery pipelines and apply observability practices that capture metrics such as response times error rates and transaction volumes Service level agreements should be defined for each API and monitored in real time to identify performance bottlenecks and plan capacity adjustments. Practical examples include a system api that normalizes and validates data from an older enterprise resource planning system a process api that calculates risk metrics by combining information from internal systems and third party services and an experience api that delivers only the relevant data needed by a mobile expense management application ensuring a seamless and efficient user experience.
    - custom:
        vr_pt: |
          A arquitetura chamada API led divide as interfaces de programação de aplicações em tres camadas bem definidas para tornar os sistemas de integração modulares, seguros e fáceis de manter ao longo do tempo. Cada camada tem uma responsabilidade clara que ajuda equipes a trabalhar de forma independente e a reaproveitar componentes entre diferentes projetos. A primeira camada e a Camada de Sistema. Nesta etapa as APIs atuam como ponte entre os sistemas antigos e o mundo moderno de integrações de software. As APIs de sistema se conectam diretamente a bancos de dados, filas de mensagem, sistemas de registros e outras fontes de dados corporativos. Nesta camada sao padronizados os protocolos de comunicação e formatos de dados como JSON ou XML e sao aplicados os controles de autenticacao e autorizacao. Dessa forma a complexidade e as peculiaridades dos sistemas legados ficam escondidas e as camadas superiores recebem sempre informacoes seguras, coerentes e consistentes. A segunda camada e a Camada de Processo. Aqui as APIs reu utilizam as APIs de sistema para implementar a logica de negocio central. Sao aplicadas regras de validacao de dados, transformacoes para enriquecer o conteudo, calculos especificos e orquestracoes de fluxos entre diversos sistemas. Cada passo do processo e registrado em logs estruturados para garantir rastreabilidade e facilitar investigacoes em caso de incidentes. As APIs de processo devem suportar repeticao segura de operacoes para tratar falhas automaticamente e garantir confiabilidade dos serviços. A terceira camada e a Camada de Experiencia. Nesta fase as APIs sao adaptadas para diferentes canais de consumo como portais web, aplicativos moveis, chatbots, dashboards analiticos e ate mesmo dispositivos de internet das coisas. A camada de experiencia ajusta o formato de resposta para cada tipo de usuario ou dispositivo, filtra informacoes sensiveis e aplica politicas de cache e controle de taxa de acessos para reduzir atrasos e garantir alta performance. Assim o usuario final recebe apenas o conteudo relevante de forma rapida e intuitiva. Entre os beneficios mais importantes dessa abordagem esta a reutilizacao sistematica de componentes que diminui retrabalho e acelera o desenvolvimento de novas funcionalidades. A separacao clara de responsabilidades entre as camadas facilita a manutencao, a evolucao e a aplicacao de testes automatizados. A governanca fica centralizada pois todas as politicas de seguranca, de versionamento e de monitoramento podem ser definidas em um unico ponto, garantindo conformidade com padroes corporativos. A escalabilidade e independente de cada camada permitindo ajustar os recursos de infraestrutura de acordo com a demanda de processamento e volume de acessos. Para implantar essa arquitetura com sucesso recomenda se documentar cada API em um portal unificado, descrevendo contratos usando especificacoes como OpenAPI ou RAML, automatizar testes unitarios e de integracao em pipelines de integracao continua e entrega continua, e adotar estrategias de observabilidade que capturem metricas de tempo de resposta, taxa de erros, volume de transacoes e uso de recursos. Deve se tambem definir acordos de nivel de servico para cada API e monitorar esses acordos em tempo real para identificar gargalos e planejar expansoes de capacidade. Casos de uso práticos incluem a exposicao de dados de um sistema financeiro legados por meio de uma API de sistema que normaliza e valida transacoes, o uso de uma API de processo que calcula indicadores de risco e consolida informacoes de diferentes fontes internas e a entrega de uma API de experiencia que fornece somente os dados pertinentes para um aplicativo de consulta de saldo e historico de operacoes em dispositivos moveis.
        vr_en: |
          The API led architecture organizes application programming interfaces into three distinct layers to make integrations modular, secure, and easy to maintain over time. Each layer has a clear responsibility that helps teams work independently and reuse components across different projects. The first layer is the system layer. In this stage the system APIs act as a bridge between old enterprise systems and modern integration solutions. System APIs connect directly to databases, message queues, record systems, and other corporate data sources. At this layer communication protocols and data formats such as JSON and XML are standardized and authentication and authorization controls are applied. This approach hides the complexity and peculiarities of legacy systems and ensures that higher layers always receive secure, coherent, and consistent information. The second layer is the process layer. Here the process APIs use system APIs to implement core business logic. They enforce data validation rules, perform transformations to enrich content, execute specific calculations, and orchestrate workflows across multiple systems. Each step in the process is logged in structured logs to ensure traceability and facilitate investigations in case of incidents. Process APIs must support safe repetition of operations to handle failures automatically and to guarantee service reliability. The third layer is the experience layer. In this phase the experience APIs are adapted for different consumption channels such as web portals, mobile applications, chatbots, analytical dashboards, and even internet of things devices. The experience layer adjusts response formats for each type of user or device, filters sensitive information, and applies cache strategies and rate limiting to reduce delays and ensure high performance. This way the end user receives only the relevant content quickly and intuitively. Key benefits of this approach include systematic component reuse that reduces rework and speeds up the delivery of new features. Clear separation of responsibilities between layers simplifies maintenance, evolution, and automated testing. Governance is centralized because all security, versioning, and monitoring policies can be defined in one place, ensuring compliance with corporate standards. Each layer can scale independently, allowing infrastructure resources to be adjusted according to processing demands and access volumes. To successfully implement this architecture it is recommended to document each API in a unified portal, describing contracts using specifications such as OpenAPI or RAML, automate unit and integration tests in continuous integration and continuous delivery pipelines, and adopt observability strategies that capture metrics on response times, error rates, transaction volumes, and resource usage. Service level agreements should also be defined for each API and monitored in real time to identify bottlenecks and plan capacity expansions. Practical use cases include exposing data from a legacy financial system through a system API that normalizes and validates transactions, using a process API that calculates risk indicators and consolidates information from various internal sources, and delivering an experience API that provides only the relevant data to a mobile balance and transaction history application.
    - custom:
        vr_pt: |
          A arquitetura chamada API led organiza as interfaces de programação de aplicações em três camadas principais para garantir modularidade, reutilização de componentes e governança centralizada ao longo de todo o ciclo de vida das integrações. A camada de sistema é a primeira etapa. Nela, cada API encapsula o acesso a fontes de dados corporativos como sistemas legados, bases de dados e filas de mensagens. Esta camada padroniza protocolos de comunicação, formatos de dados e mecanismos de autenticação e autorização, de forma que as camadas seguintes recebam apenas interfaces seguras, coerentes e sem a complexidade dos sistemas de origem. A camada de processo é a segunda etapa. Aqui, as APIs de processo unem e manipulam as APIs de sistema para implementar a lógica de negócio. São aplicadas regras de validação, transformações de dados, agregações e orquestrações de fluxo entre múltiplas fontes. Cada transação é registrada em logs detalhados para garantir rastreabilidade e permitir diagnóstico rápido em caso de falhas. As APIs de processo também devem suportar repetição segura de operações, tratando automaticamente erros e garantindo alta confiabilidade. A camada de experiência é a terceira etapa. Neste nível, as APIs de experiência adaptam os serviços de processo para diferentes canais, como portais web, aplicativos móveis, chat bots e dispositivos de internet das coisas. As respostas são formatadas conforme a necessidade de cada consumidor, dados sensíveis são filtrados, limites de taxa são aplicados e políticas de cache são configuradas para otimizar desempenho e reduzir latência, assegurando uma interação rápida e fluida para o usuário final. Entre os principais ganhos desse padrão estão a reutilização sistemática de APIs, que reduz retrabalho e acelera a entrega de novas funcionalidades; a separação clara de responsabilidades, que facilita manutenção, testes automatizados e evolução contínua; a governança unificada, com políticas de segurança, versionamento e monitoramento definidas em um único ponto; e a escalabilidade independente de cada camada, permitindo ajustar recursos de infraestrutura conforme picos de uso ou cargas de processamento. Para implementar com sucesso recomenda-se documentar todas as APIs em um portal central, descrever contratos usando especificações como OpenAPI ou RAML, automatizar testes unitários e de integração em pipelines de integração contínua e entrega contínua, e adotar métricas de observabilidade que capturem tempos de resposta, taxas de erro e volumes de transações. Acordos de nível de serviço devem ser definidos para cada API e monitorados em tempo real, com alertas automáticos em caso de degradação de desempenho. Exemplos práticos incluem a criação de uma API de sistema que normaliza dados de um sistema financeiro antigo, o desenvolvimento de uma API de processo que calcula indicadores de risco financeiro e combina informações de diferentes serviços, e o uso de uma API de experiência que entrega apenas as informações relevantes para um aplicativo móvel de consulta de saldo e extrato, garantindo alta performance e excelente experiência ao usuário.
        vr_en: |
          The architecture known as API led arranges application programming interfaces into three main layers to ensure modularity component reuse and centralized governance throughout the integration lifecycle. The system layer is the first stage. In this layer each API encapsulates access to corporate data sources such as legacy systems databases and message queues This layer standardizes communication protocols data formats and authentication and authorization mechanisms so that upper layers receive only secure consistent interfaces without the complexity of underlying systems. The process layer is the second stage Here process APIs combine and manipulate system APIs to implement business logic Validation rules data transformations aggregations and flow orchestrations across multiple sources are applied Each transaction is recorded in detailed structured logs to guarantee traceability and enable rapid diagnostics in case of failures Process APIs must also support safe retry of operations automatically handling errors and ensuring high reliability. The experience layer is the third stage At this level experience APIs adapt process services for various channels such as web portals mobile applications chat bots and Internet of Things devices Responses are formatted to meet each consumer’s needs sensitive data is filtered rate limits are enforced and caching policies are configured to optimize performance and reduce latency ensuring a fast seamless user interaction. Key benefits of this pattern include systematic API reuse which reduces rework and accelerates delivery of new features clear separation of responsibilities which simplifies maintenance automated testing and continuous evolution unified governance with security versioning and monitoring policies defined in one place and independent scalability of each layer allowing infrastructure resources to be adjusted according to traffic spikes or processing demands. To implement successfully it is recommended to document all APIs in a central portal describe contracts using specifications such as OpenAPI or RAML automate unit and integration tests in continuous integration and continuous delivery pipelines and adopt observability metrics that capture response times error rates and transaction volumes Service level agreements should be defined for each API and monitored in real time with automatic alerts in case of performance degradation. Practical examples include creating a system API that normalizes data from an older financial system developing a process API that calculates financial risk indicators and aggregates information from different services and using an experience API that delivers only the relevant information to a mobile balance and transaction history application ensuring high performance and excellent user experience.
    - custom:
        vr_pt: |
          A abordagem chamada API led divide as APIs em tres camadas complementares para criar integrações mais organizadas e flexiveis. Na Camada de Sistema as APIs estabelecem conexoes diretas com sistemas antigos, bases de dados e filas de mensagens, padronizando a forma de comunicacao e garantindo que todos os dados sejam expostos de forma segura e consistente. Na Camada de Processo as APIs combinam as informacoes da Camada de Sistema e aplicam a logica de negocio central. Neste nivel sao realizadas validacoes, transformacoes de dados, calculos de indicadores e orquestracoes de fluxo entre varios servicos, sempre registrando cada passo em logs estruturados para facilitar depuracoes e auditorias. Na Camada de Experiencia as APIs sao ajustadas para consumos especificos, como portais web, aplicativos moveis, chat bots e dashboards analiticos. Esta camada adapta o formato de resposta, filtra dados sensiveis, aplica controles de uso e politicas de cache para garantir que o usuario final receba apenas o que necessita, com alta performance e baixa latencia. Os ganhos principais incluem aceleracao no desenvolvimento por meio do reaproveitamento de componentes, manutencao mais simples pela clara definicao de responsabilidades, governanca centralizada com controle uniforme de seguranca e monitoramento, e escalabilidade independente de cada camada conforme as variacoes de carga. Como exemplo de uso, pode-se criar uma API de sistema que fornece dados de estoque, uma API de processo que calcula estatisticas de vendas diarias e agrega informacoes de diversas fontes, e uma API de experiencia que apresenta somente os resultados relevantes em um portal de vendas para os usuarios.
        vr_en: |
          The API led approach splits APIs into three complementary layers to make integrations more organized and flexible. In the System Layer APIs establish direct connections to legacy systems databases and message queues standardizing how data flows and ensuring that all information is exposed securely and consistently. In the Process Layer APIs combine information from the System Layer and apply core business logic. At this level validation rules run data transformations indicators are calculated and flows are orchestrated across multiple services with each step logged in structured logs to simplify debugging and auditing. In the Experience Layer APIs are tailored for specific consumption channels such as web portals mobile applications chat bots and analytical dashboards. This layer adapts response formats filters sensitive data enforces rate limits and cache policies so that end users receive only what they need with high performance and low latency. Key benefits include faster development through component reuse easier maintenance thanks to clear responsibility boundaries centralized governance with uniform security and monitoring controls and independent scalability of each layer based on load variations. For example one can create a system API that provides inventory data a process API that calculates daily sales statistics and aggregates information from various sources and an experience API that delivers only the relevant results to a sales portal for users.
    - custom:
        vr_pt: |
          A estratégia API led organiza as interfaces de programação em três camadas interligadas para promover agilidade, reutilização e governança clara. Na primeira camada, chamada Camada de Sistema, as APIs abstraem as fontes de dados corporativos, como sistemas legados, bancos de dados e filas de mensagens. Essa camada padroniza protocolos de comunicação, formatos de dado e mecanismos de segurança, garantindo que as camadas superiores recebam informações uniformes, seguras e sem complexidade de implementação. A segunda camada, denominada Camada de Processo, concentra a lógica de negócio. Aqui as APIs de processo orquestram e combinam dados vindos da Camada de Sistema, aplicando regras de validação, transformações, agregações e cálculos específicos do domínio. Cada fluxo de trabalho é registrado em log organizado para facilitar auditorias e permitir diagnósticos precisos em caso de falhas. A terceira camada, a Camada de Experiência, adapta as APIs aos diferentes pontos de contato do usuário final, como portais web, aplicativos móveis, assistentes conversacionais e painéis de análise. Nesta etapa ajustam-se o formato das respostas, filtram-se dados sensíveis, aplicam-se controles de taxa de chamadas e políticas de cache para otimizar desempenho, reduzir latência e entregar conteúdo relevante de forma rápida e intuitiva. Os benefícios dessa abordagem incluem aceleração no desenvolvimento por meio de componentes reutilizáveis, manutenção mais eficiente graças à clara divisão de responsabilidades, governança centralizada que unifica políticas de segurança e monitoramento, além de escalabilidade independente, permitindo ajustar recursos conforme picos de uso e demandas específicas. Um caso de uso típico é expor dados de estoque por meio de uma API de sistema, criar uma API de processo que calcula previsões de venda com base em múltiplas fontes de informação e disponibilizar uma API de experiência que fornece apenas os indicadores mais importantes em um painel de controle para gestores.
        vr_en: |
          The API led strategy arranges programming interfaces into three interconnected layers to foster agility reuse and clear governance. The first layer called the System Layer abstracts corporate data sources such as legacy systems databases and message queues. This layer standardizes communication protocols data formats and security mechanisms ensuring that upper layers receive uniform secure information without implementation complexity. The second layer known as the Process Layer focuses on business logic. Here process APIs orchestrate and combine data from the System Layer applying validation rules transformations aggregations and domain specific calculations. Each workflow is recorded in organized logs to facilitate audits and enable precise diagnostics in case of failures. The third layer the Experience Layer tailors APIs to different end user touchpoints such as web portals mobile apps conversational assistants and analytic dashboards. At this stage response formats are adjusted sensitive data is filtered rate limiting and caching policies are applied to optimize performance reduce latency and deliver relevant content quickly and intuitively. The benefits of this approach include faster development through reusable components more efficient maintenance thanks to clear responsibility separation centralized governance that unifies security monitoring policies and independent scalability allowing resources to be adjusted for usage spikes and specific demands. A typical use case is exposing inventory data through a system API creating a process API that generates sales forecasts based on multiple data sources and providing an experience API that delivers only the most important metrics in a dashboard for managers.
    - custom:
        vr_pt: |
          A arquitetura API led organiza as interfaces de programacao em tres camadas interdependentes garantindo modularidade governanca e adaptabilidade continua. Camada de Sistema, nesta camada as APIs atuam como adaptadores entre sistemas legados bancos de dados e filas de mensagem Elas padronizam protocolos formatos de dados e controle de acesso de modo que as camadas superiores recebam sempre informacoes coerentes seguras e livres da complexidade dos sistemas de origem. Camada de Processo, as APIs de processo combinam e enriquecem os dados recebidos da camada de sistema aplicando regras de negocio validacoes transformacoes e calculos especificos Cada tarefa e registrada em logs detalhados para permitir rastreamento e solucao rapida de problemas alem de suportar tentativas automaticas de repeticao em caso de falhas garantindo alta confiabilidade. Camada de Experiencia, nesta fase as APIs sao customizadas para pontos de contato variados como portais web aplicativos moveis chat bots e paineis de controle. A camada de experiencia ajusta o formato de resposta filtra dados sensiveis e aplica politicas de cache e limitacao de chamadas garantindo que o usuario receba apenas o conteudo necessario com desempenho otimizado e baixa latência. Beneficios principais, reutilizacao eficaz de APIs reduz retrabalho e acelera entrega de novas funcionalidades, separacao clara de responsabilidades facilita manutencao testes automatizados e iteracao rapida, governanca centralizada com politicas de seguranca versionamento e monitoramento aplicadas de forma consistente, escalabilidade independente de cada camada permite ajuste de recursos conforme picos de uso e demandas especificas. Exemplo de aplicacao, imagine uma organizacao que expoe dados de cadastro de clientes por meio de uma API de sistema desenvolve uma API de processo para calcular score de credito e agrega informacoes de multiplas fontes e disponibiliza uma API de experiencia que fornece somente o score calculado em um aplicativo movel de consulta de credito.
        vr_en: |
          The API led architecture arranges programming interfaces into three interdependent layers to ensure modularity governance and continuous adaptability System Layer In this layer APIs act as adapters between legacy systems databases and message queues They standardize protocols data formats and access control so that upper layers always work with coherent secure information free from underlying system complexity Process Layer Process APIs combine and enrich data from the system layer by applying business rules validations transformations and specific calculations Each task is logged in detail to allow tracing and quick issue resolution and to support automatic retries in case of failures ensuring high reliability Experience Layer At this stage APIs are customized for various touchpoints such as web portals mobile applications chat bots and dashboards The experience layer adjusts response formats filters sensitive data and applies caching and rate limiting policies ensuring that users receive only the necessary content with optimized performance and low latency Key benefits Effective API reuse that reduces rework and speeds up new feature delivery Clear responsibility separation that simplifies maintenance automated testing and rapid iteration Centralized governance with security versioning and monitoring policies applied consistently Independent scalability of each layer allowing resources to be adjusted for usage spikes or specific demands Use case example Consider an organization that exposes customer records through a system API builds a process API to calculate credit scores by aggregating multiple data sources and provides an experience API that delivers only the calculated score in a mobile credit inquiry app
    - custom:
        vr_pt: |
          A arquitetura conhecida como API led organiza as interfaces de programação em três camadas complementares, cada uma com objetivos e responsabilidades específicos, visando construir soluções modulares, seguras, escaláveis e de fácil manutenção. A primeira camada, chamada Camada de Sistema, tem a função de encapsular o acesso a todos os sistemas legados, bancos de dados relacionais e não relacionais, filas de mensagens, serviços de terceiros e demais fontes de dados corporativos. Nesta etapa, as APIs de sistema padronizam os protocolos de comunicação, definem formatos de payload, como JSON ou XML, e implementam mecanismos de autenticação e autorização centralizados, garantindo que somente informações validadas e confiáveis sejam expostas às camadas superiores. Além disso, a Camada de Sistema oculta a complexidade técnica dos sistemas de origem, provendo um ponto único de integração que facilita futuras migrações e evoluções tecnológicas sem impactar diretamente os consumidores das APIs. A segunda camada, denominada Camada de Processo, concentra toda a lógica de negócio. Ela recebe dados das APIs de sistema, aplica regras de validação, realiza transformações para enriquecer ou normalizar informações, executa cálculos e orquestra fluxos de trabalho entre múltiplos serviços internos e externos. Cada endpoint de processo deve ser projetado de forma idempotente, permitindo a repetição segura de operações em caso de falhas, e deve registrar cada transação em logs estruturados, capturando métricas de desempenho, volumes de dados processados e eventos de erro, de modo a suportar monitoramento avançado, auditoria e análises de causa raiz. A terceira camada, conhecida como Camada de Experiência, adapta as APIs de processo para diferentes canais de consumo, como portais web, aplicativos móveis nativos, centros de atendimento via chat bot, painéis de análise e até dispositivos de Internet das Coisas. Nessa fase, as APIs de experiência customizam o formato das respostas, agregam dados relevantes, filtram informações sensíveis e aplicam políticas de segurança adicionais, como controle de escopo de acesso, limitação de taxa de chamadas e mecanismos de cache inteligente, garantindo baixa latência e melhor experiência para o usuário final. A camada de experiência também pode incluir transformações de visualização, como agrupamento de dados em estruturas específicas para relatórios ou dashboards. Entre os principais benefícios da abordagem API led destacam-se o reaproveitamento sistemático de componentes, que reduz significativamente o retrabalho; a separação clara de responsabilidades, que facilita a governança e a manutenção; a centralização das políticas de segurança, que garante conformidade regulatória e rastreabilidade; e a escalabilidade independente de cada camada, permitindo alocar recursos de infraestrutura de acordo com picos de carga ou requisitos específicos de performance. Para implementar com sucesso, recomenda-se documentar todas as APIs em um portal unificado, usando especificações OpenAPI ou RAML, definindo contratos claros e versões de interface. Deve-se adotar pipelines de Integração Contínua e Entrega Contínua para validar cada alteração, incluindo testes unitários e de integração, além de práticas de observabilidade que capturem métricas como tempo de resposta, taxa de erros, throughput e uso de recursos. Acordos de nível de serviço para cada API devem ser formalizados e monitorados, com alertas configurados para antecipar possíveis degradações de desempenho e suportar planejamento de capacidade. Exemplos práticos de aplicação incluem a migração de um sistema de gestão de estoques legados, onde uma API de sistema normaliza e disponibiliza dados de inventário; uma API de processo agrega informações de vendas, custos logísticos e histórico de consumo para calcular indicadores de rotatividade; e uma API de experiência fornece painéis interativos para gestores, exibindo somente os dados essenciais em interfaces web ou móveis, com filtros dinâmicos e relatórios customizados.
        vr_en: |
          The architecture known as API led structures programming interfaces into three complementary layers each with distinct objectives and responsibilities designed to build modular secure scalable and maintainable integration solutions The first layer called the System Layer serves to encapsulate access to all legacy systems relational and non relational databases message queues third party services and any other corporate data sources At this stage system APIs standardize communication protocols specify payload formats such as JSON or XML and implement centralized authentication and authorization mechanisms ensuring that only validated reliable information is exposed to higher layers The System Layer hides the technical complexity of underlying systems by providing a single integration point that simplifies future migrations and technology upgrades without directly impacting API consumers The second layer known as the Process Layer focuses on core business logic It receives data from system APIs applies validation rules performs transformations to enrich or normalize information executes calculations and orchestrates workflows across multiple internal and external services Each process endpoint should be designed to be idempotent allowing safe retries in case of failures and must log every transaction in structured logs capturing performance metrics data volumes and error events supporting advanced monitoring auditing and root cause analysis The third layer referred to as the Experience Layer adapts process APIs for different consumption channels such as web portals native mobile applications chat bots analytics dashboards and even Internet of Things devices At this stage experience APIs customize response formats aggregate relevant data filter out sensitive information and apply additional security policies such as access scope enforcement rate limiting and intelligent caching ensuring low latency and an optimal end user experience The Experience Layer may also include presentation transformations grouping data into specific structures for reports or dashboards Key benefits of the API led approach include systematic component reuse reducing significant rework clear separation of concerns simplifying governance and maintenance centralized security policy enforcement ensuring regulatory compliance and traceability and independent scalability of each layer allowing infrastructure resources to be allocated based on load spikes or specific performance requirements To implement successfully it is recommended to document all APIs in a unified portal using OpenAPI or RAML specifications defining clear contracts and interface versions Adoption of continuous integration and continuous delivery pipelines is essential to validate every change through unit and integration tests along with observability practices capturing metrics such as response times error rates throughput and resource utilization Service level agreements for each API should be formalized and monitored with automated alerts to anticipate potential performance degradations and support capacity planning Practical use cases include migrating a legacy inventory management system where a system API normalizes and exposes inventory data a process API aggregates sales logistics and consumption history to calculate turnover metrics and an experience API supplies interactive dashboards for managers displaying only essential data on web or mobile interfaces with dynamic filters and custom reports.
