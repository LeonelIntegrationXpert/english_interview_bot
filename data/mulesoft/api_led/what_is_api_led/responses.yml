version: '3.1'
responses:
  utter_what_is_api_led:
    - custom:
        vr_pt: |
          API-led organiza APIs em três camadas distintas para promover reutilização e governança. inicialmente a Camada de Sistema acessa sistemas legados e dados; depois a Camada de Processo aplica lógica de negócio e transforma informações; por fim a Camada de Experiência entrega APIs específicas para canais como web ou mobile. Vantagens: aproveitamento de componentes, clareza de responsabilidades, controle centralizado de políticas e elasticidade independente de cada camada. Exemplos: integração de legados com microserviços, disponibilização de dados para apps móveis, orquestração de fluxos complexos.
        vr_en: |
          API-led structures APIs into three layers to enhance reuse and governance. first the System Layer connects to legacy systems and data sources; next the Process Layer applies business logic and transforms data; finally the Experience Layer delivers APIs tailored to web or mobile channels. Benefits: component reuse, clear separation of concerns, centralized policy control, and independent scalability of each layer. Use cases: integrating legacy with microservices, exposing data to mobile apps, orchestrating complex workflows.
    - custom:
        vr_pt: |
          A abordagem API-led segmenta APIs em Camada de Sistema, Camada de Processo e Camada de Experiência para garantir modularidade e governança. a Camada de Sistema se comunica diretamente com bancos e sistemas legados; a de Processo aplica regras de negócio e converte dados; a de Experiência disponibiliza APIs customizadas para diferentes clientes. Benefícios incluem aceleração do desenvolvimento, manutenção facilitada, aplicação central de políticas e escalonamento isolado. Cenários: conectar legados a microserviços, criar APIs para apps móveis, coordenar fluxos via APIs.
        vr_en: |
          API-led divides APIs into System, Process, and Experience Layers for modularity and governance. the System Layer talks directly to databases and legacy systems; the Process Layer applies business rules and transforms payloads; the Experience Layer exposes custom APIs for various consumers. Benefits include faster development, easier maintenance, centralized policy enforcement, and isolated scaling. Scenarios: linking legacy to microservices, building APIs for mobile apps, orchestrating flows via APIs.
    - custom:
        vr_pt: |
          Em API-led, as APIs são organizadas em três níveis: Sistema, Processo e Experiência. a Camada de Sistema abstrai sistemas legados e dados; a Camada de Processo implementa e reutiliza lógica de negócio; a Camada de Experiência entrega endpoints para front-ends específicos. Essa estrutura melhora a reutilização, mantém responsabilidades separadas, centraliza segurança e facilita o dimensionamento independente. Exemplos de uso: modernizar legados, criar APIs para dispositivos móveis e controlar orquestrações.
        vr_en: |
          In API-led, APIs are arranged in three layers: System, Process, and Experience. the System Layer abstracts legacy systems and data; the Process Layer implements and reuses business logic; the Experience Layer delivers endpoints for specific front-ends. This structure enhances reuse, keeps responsibilities separated, centralizes security, and enables independent scaling. Use cases: modernizing legacy, building APIs for mobile, and managing orchestrations.
    - custom:
        vr_pt: |
          API-led propõe três camadas de APIs: Sistema, Processo e Experiência, visando reutilização e governança. na Camada de Sistema, há conexão direta com fontes de dados; na de Processo, ocorre orquestração e transformação; na de Experiência, são expostas APIs customizadas ao consumidor final. Os ganhos são rapidez no desenvolvimento, clareza no design, políticas unificadas e escalabilidade isolada. Casos práticos: integração legada, oferta de serviços a apps móveis e gestão de workflows complexos.
        vr_en: |
          API-led advocates three API layers: System, Process, and Experience, targeting reuse and governance. the System Layer directly connects to data sources; the Process Layer orchestrates and transforms; the Experience Layer exposes customized APIs to end users. Gains include development speed, clear design, unified policies, and isolated scalability. Practical cases: legacy integration, serving mobile apps, and managing complex workflows.
    - custom:
        vr_pt: |
          Na arquitetura API-led, APIs são divididas em Camada de Sistema, Camada de Processo e Camada de Experiência. a primeira conecta sistemas legados; a segunda centraliza lógica e manipulação de dados; a terceira apresenta APIs voltadas a interfaces cliente. Essa divisão facilita o reaproveitamento, define limites claros de responsabilidade, centraliza políticas de segurança e permite escalonar cada camada independentemente. Exemplos: migrar sistemas antigos, criar back-ends para apps e coordenar chamadas de API.
        vr_en: |
          In API-led architecture, APIs split into System, Process, and Experience Layers. the first connects legacy systems; the second centralizes logic and data handling; the third presents APIs tailored to client interfaces. This separation eases reuse, sets clear responsibility boundaries, centralizes security policies, and allows each layer to scale independently. Examples: migrating old systems, building back-ends for apps, and coordinating API calls.
    - custom:
        vr_pt: |
          API-led organiza seus serviços em três camadas: Sistema (acesso a fontes de dados), Processo (lógica de negócio e transformação) e Experiência (APIs para consumidores específicos). Esse modelo promove reutilização de componentes, deixa claro quem faz o quê, uniformiza políticas de segurança e possibilita escalar cada parte sem afetar as outras. Pode ser usado para integrar legados, expor APIs a dispositivos móveis e orquestrar processos complexos.
        vr_en: |
          API-led arranges services into three layers: System (data source access), Process (business logic and transformation), and Experience (APIs for specific consumers). This model fosters component reuse, clarifies responsibilities, standardizes security policies, and enables scaling each part independently. It’s useful for legacy integration, exposing APIs to mobile devices, and orchestrating complex processes.
    - custom:
        vr_pt: |
          A prática API-led estabelece três camadas: a de Sistema para conectar legados e dados, a de Processo para orquestração de regras de negócio e a de Experiência para criar APIs de consumo. Essa abordagem acelera o desenvolvimento ao reutilizar APIs, melhora a manutenção ao separar responsabilidades, garante governança centralizada e permite escalar cada camada conforme a demanda. Exemplo: sincronizar sistemas internos, publicar APIs para front-ends e gerenciar workflows.
        vr_en: |
          The API-led practice sets three layers: System to connect legacy and data, Process to orchestrate business rules, and Experience to build consumption APIs. This approach speeds development through API reuse, improves maintenance by separating responsibilities, ensures centralized governance, and allows each layer to scale as needed. Example: sync internal systems, publish APIs for front ends, and manage workflows.
    - custom:
        vr_pt: |
          API-led é um modelo de três camadas: primeiro a Camada de Sistema expõe dados de back-end, depois a Camada de Processo implementa lógica e repassa informações, e por último a Camada de Experiência fornece APIs adequadas ao contexto do usuário. Benefícios: redução de esforço com APIs reutilizáveis, responsabilidades bem definidas, políticas de segurança padronizadas e escalonamento independente. Usos típicos: expor dados legados, prover endpoints para apps e orquestrar serviços.
        vr_en: |
          API-led is a three-layer model: first the System Layer exposes back-end data, then the Process Layer implements logic and relays information, and finally the Experience Layer provides context-appropriate APIs. Benefits: reduced effort with reusable APIs, well-defined responsibilities, standardized security policies, and independent scaling. Typical uses: exposing legacy data, providing endpoints for apps, and orchestrating services.
    - custom:
        vr_pt: |
          Na estratégia API-led, dividem-se APIs em: Camada de Sistema para acesso direto a legados, Camada de Processo para transformar e unificar dados, e Camada de Experiência para disponibilizar APIs customizadas. Vantagens incluem uso de APIs como blocos de construção, clareza na divisão de responsabilidades, governança central sobre políticas e possibilidade de dimensionamento modular. Exemplos: criação de adaptadores legados, APIs para clientes mobile e coordenação de transações multi-sistema.
        vr_en: |
          In the API-led strategy, APIs split into: System Layer for direct legacy access, Process Layer to transform and unify data, and Experience Layer to deliver customized APIs. Advantages include using APIs as building blocks, clarity in responsibility division, central governance over policies, and modular scaling. Examples: building legacy adapters, APIs for mobile clients, and coordinating cross-system transactions.
    - custom:
        vr_pt: |
          API-led propõe três camadas de APIs: Sistema (conectar legados e fontes de dados), Processo (aplicar regras de negócio e converter formatos) e Experiência (expor APIs para casos de uso específicos). Esse design viabiliza reutilização de serviços, separa responsabilidades, aplica governança unificada e permite escalar cada camada conforme necessidade. Exemplos práticos: conectar ERPs, fornecer APIs a apps móveis e orquestrar jornadas de usuário.
        vr_en: |
          API-led proposes three API layers: System (connect legacy and data sources), Process (apply business rules and convert formats), and Experience (expose APIs for specific use cases). This design enables service reuse, separates responsibilities, applies unified governance, and lets each layer scale as needed. Practical examples: connecting ERPs, providing APIs to mobile apps, and orchestrating user journeys.
