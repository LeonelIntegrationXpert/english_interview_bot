version: '3.1'
responses:
  utter_oauth2_jwt:
    - custom:
        vr_pt: |
          OAuth dois é um protocolo de autorização que permite que aplicações cliente obtenham tokens de acesso com escopos bem definidos, ou seja, permissões específicas como ler dados ou escrever informações sem jamais revelar o nome de usuário e a senha do usuário final. Esses tokens de acesso podem ter diferentes níveis de permissão e um tempo de validade limitado, garantindo que a aplicação só possa executar as ações autorizadas enquanto o token estiver válido. O JSON Web Token, conhecido pela sigla JWT, é um formato de token que carrega por si mesmo todas as informações necessárias para verificar quem é o usuário e quais permissões ele tem. Esse token é composto por três partes escritas em texto plano e separadas por pontos: o cabeçalho que indica o tipo de token e o algoritmo de assinatura usado; o corpo ou “payload” que contém os dados do usuário como o identificador, o nome e as permissões, tudo em formato de objeto JSON; e a assinatura criptográfica que garante que ninguém alterou os dados entre o emissor e o consumidor do token. Como o JWT é auto contido, o serviço que recebe o token pode validar sua integridade e extraír as declarações de autorização apenas conferindo a assinatura, sem precisar fazer chamadas adicionais a um servidor de autenticação, o que acelera o processamento e reduz a carga na infraestrutura.
        vr_en: |
          OAuth two is an authorization protocol that allows client applications to obtain access tokens with well defined scopes, meaning specific permissions such as reading data or writing information without ever exposing the end user’s username and password. These access tokens can have different permission levels and a limited validity period, ensuring that the application can only perform the authorized actions while the token remains valid. The JSON Web Token, known by the acronym JWT, is a token format that carries within itself all the information needed to verify who the user is and what permissions they have. This token consists of three parts written in plain text and separated by periods: the header that indicates the token type and the signing algorithm used; the body or “payload” that contains user data such as the identifier name and permissions, all in JSON object format; and the cryptographic signature that ensures nobody has tampered with the data between the issuer and the token consumer. Because the JWT is self contained, the service receiving the token can validate its integrity and extract the authorization claims simply by checking the signature without needing additional calls to an authentication server, which speeds up processing and reduces infrastructure load.
    - custom:
        vr_pt: |
          No fluxo do protocolo OAuth dois, depois que o cliente ou o usuário se autentica com sucesso, o servidor de autorização emite dois tipos de tokens: o token de acesso e o token de renovação. O token de acesso funciona como uma chave temporária para chamar as APIs protegidas, permitindo que o cliente faça requisições dentro dos limites de permissões definidas pelos escopos. Já o token de renovação possui um prazo de validade mais longo e serve para obter novos tokens de acesso sem demandar que o usuário efetue outra autenticação completa. O JSON Web Token, ou JWT, é composto por três partes escritas em texto plano e separadas por pontos. A primeira parte, chamada cabeçalho, informa o tipo do token e o algoritmo de assinatura usado, por exemplo, algoritmo HMAC SHA dois cinquenta e seis. A segunda parte, chamada carga útil ou payload, contém declarações que identificam o usuário, o tempo de emissão e o tempo de expiração, além dos escopos de permissão. A terceira parte é a assinatura criptográfica, que garante que o cabeçalho e o payload não foram alterados. Todas as três partes são codificadas em base sessenta e quatro para permitir o transporte seguro pela internet, mas ao decodificar e validar a assinatura, o receptor sabe que o token é confiável e pode usar as informações ali contidas sem precisar consultar outro serviço.
        vr_en: |
          In the OAuth two flow, once the client or user successfully authenticates, the authorization server issues two kinds of tokens: the access token and the refresh token. The access token acts as a temporary key to call protected APIs, allowing the client to make requests within the permission limits defined by the scopes. The refresh token, on the other hand, has a longer lifespan and is used to obtain new access tokens without requiring the user to perform a full authentication again. The JSON Web Token or JWT consists of three plain text parts separated by periods. The first part called the header specifies the token type and the signing algorithm used for example the HMAC SHA two fifty six algorithm. The second part known as the payload contains claims that identify the user the issuance time and the expiration time as well as the permission scopes. The third part is the cryptographic signature which ensures that neither the header nor the payload have been tampered with. All three parts are encoded in base sixty four to allow secure transport over the internet but by decoding and validating the signature the recipient knows the token is trustworthy and can use the contained information without needing to call another service.
    - custom:
        vr_pt: |
          O protocolo OAuth dois oferece diferentes modelos de autorização para atender às particularidades de cada tipo de aplicação. No fluxo chamado “código de autorização”, o usuário autentica-se em um provedor de identidade por meio de uma interface web e, após conceder permissão, o servidor de autorização devolve ao cliente um código temporário. Esse código é então trocado por um token de acesso e um token de renovação diretamente no back-end, garantindo que as credenciais do usuário nunca transitem pelo navegador. Já no fluxo de “credenciais do cliente”, utilizado em cenários servidor-servidor, a aplicação usa seu próprio identificador e segredo para obter um token de acesso sem envolver um usuário final. O JSON Web Token, ou JWT, organiza as informações de forma autocontida dentro do próprio token. No “payload” são incluídos os claims que descrevem a identidade do usuário, como o identificador único, o nome e o e-mail, além dos escopos ou permissões que determinam às operações que ele tem direito de realizar. Como o JWT já carrega essas declarações e vem acompanhando de uma assinatura criptográfica baseada em um segredo compartilhado ou em chaves assimétricas, qualquer serviço que receba o token pode verificar sua autenticidade e decodificar imediatamente as permissões sem precisar contatar novamente o servidor de autorização, o que torna o processo mais rápido e resiliente.
        vr_en: |
          The OAuth two protocol provides different authorization flows tailored to the needs of each type of application. In the “authorization code” flow the user authenticates with an identity provider via a web interface and upon granting permission the authorization server returns a temporary code to the client. This code is then exchanged for an access token and a refresh token directly in the back end ensuring that user credentials never traverse the browser. In contrast the “client credentials” flow used in server to server scenarios allows the application to use its own client identifier and secret to obtain an access token without involving an end user. The JSON Web Token or JWT structures information in a self contained manner within the token itself. The payload includes claims that describe the user’s identity such as the unique identifier name and email as well as the scopes or permissions defining which operations the user may perform. Because the JWT carries these statements and is accompanied by a cryptographic signature based on either a shared secret or asymmetric key pair any service receiving the token can verify its authenticity and immediately decode the permissions without having to contact the authorization server again making the process faster and more resilient.
    - custom:
        vr_pt: |
          No protocolo OAuth dois existem dois endpoints principais chamados endpoint de autorização e endpoint de emissão de token. O endpoint de autorização conduz o usuário ou aplicação cliente a um fluxo seguro de autenticação e, depois de validar as credenciais, devolve um código temporário de autorização. Em seguida o endpoint de emissão de token recebe esse código de autorização e retorna dois tokens distintos: o token de acesso, que autoriza requisições aos recursos protegidos, e o token de renovação, que permite obter novos tokens de acesso sem nova autenticação do usuário. O JSON Web Token é um formato de token que traz todas as informações necessárias para autenticação e autorização de forma autocontida. Ele é composto por três seções codificadas em base sessenta e quatro separadas por ponto. A primeira seção é o cabeçalho, onde se define o tipo de token e o algoritmo de assinatura. A segunda é o corpo ou payload, que carrega declarações como o identificador do usuário, as permissões concedidas e o tempo de expiração. A terceira seção é a assinatura criptográfica, que garante que o conteúdo não foi alterado durante o transporte. Por ser legível e assinado digitalmente, o JWT permite que qualquer serviço receptor valide rapidamente sua integridade e extraia as permissões sem precisar consultar o servidor de autorização a cada requisição, melhorando o desempenho e reduzindo chamadas de rede.
        vr_en: |
          In the OAuth two protocol there are two main endpoints called the authorization endpoint and the token issuance endpoint. The authorization endpoint guides the user or client application through a secure authentication flow and after validating credentials returns a temporary authorization code. Then the token issuance endpoint receives that authorization code and returns two distinct tokens: the access token, which authorizes requests to protected resources, and the refresh token, which allows obtaining new access tokens without re authenticating the user. The JSON Web Token is a token format that carries all necessary authentication and authorization information in a self contained way. It consists of three sections encoded in base sixty four separated by periods. The first section is the header where the token type and signing algorithm are defined. The second section is the body or payload which carries claims such as user identifier granted permissions and expiration time. The third section is the cryptographic signature ensuring the content has not been tampered with during transport. Being human readable and digitally signed the JWT allows any receiving service to quickly validate its integrity and extract permissions without needing to call the authorization server on every request improving performance and reducing network calls.
    - custom:
        vr_pt: |
          O protocolo OAuth dois protege recursos ao delegar permissões específicas aos clientes por meio de tokens de acesso que têm escopos limitados. Esses tokens permitem que a aplicação emissora acesse apenas as operações autorizadas, sem expor as credenciais do usuário. Como o token de acesso não contém dados de autenticação sensíveis, ele pode ser enviado em cada requisição sem risco de revelar senhas. O JSON Web Token tem a vantagem de ser completamente autocontido, o que significa que ele já carrega no seu payload todas as informações necessárias para a autorização, como o identificador do usuário, os escopos concedidos e o prazo de validade. Dessa forma não é preciso consultar a cada requisição o servidor de autenticação para verificar permissões ou validade do token. Esse comportamento reduz a latência das chamadas, diminui o tráfego de rede e melhora a escalabilidade da plataforma, pois qualquer serviço que receba o token pode validá-lo localmente por meio da assinatura criptográfica e extrair rapidamente as permissões necessárias.
        vr_en: |
          The OAuth two protocol protects resources by delegating specific permissions to clients through access tokens that carry limited scopes. These tokens allow the issuing application to perform only the authorized operations without exposing user credentials. Since the access token does not include sensitive authentication data it can be sent with each request without risk of revealing passwords. The JSON Web Token offers the advantage of being fully self contained meaning that it already carries in its payload all necessary authorization details such as the user identifier granted scopes and expiration time. As a result there is no need to query the authentication server on every request to verify permissions or token validity. This behavior reduces call latency decreases network traffic and improves platform scalability because any service receiving the token can validate it locally using its cryptographic signature and quickly extract the required permissions.
    - custom:
        vr_pt: |
          No fluxo do OAuth dois o usuário concede permissão ao cliente para acessar recursos em seu nome sem compartilhar sua senha. Primeiro o cliente redireciona o usuário ao servidor de autorização, onde ele faz login e aceita conceder acesso. Em seguida o servidor de autorização emite um código de autorização que o cliente troca por um token de acesso. Esse token de acesso é um JSON Web Token que contém todos os dados necessários para autorizar chamadas subsequentes. Quando o serviço recebedor obtém esse JSON Web Token ele decodifica o token dividindo as três partes codificadas em base sessenta e quatro — cabeçalho payload e assinatura. No cabeçalho está o tipo de token e o algoritmo de assinatura. No payload estão as declarações que indicam quem é o usuário quais permissões ele possui e até quando o token é válido. Por fim o serviço verifica a assinatura digital usando a chave pública do emissor para garantir que o token é autêntico e não foi alterado. Só depois dessas validações ele processa a requisição com base nos privilégios definidos pelo token.
        vr_en: |
          In the OAuth two flow the user grants permission to the client to access resources on their behalf without sharing their password. First the client redirects the user to the authorization server where they log in and consent to grant access. Then the authorization server issues an authorization code which the client exchanges for an access token. This access token is a JSON Web Token that carries all the data needed to authorize subsequent calls. When the receiving service gets this JSON Web Token it decodes the token by splitting the three parts encoded in base sixty four — header payload and signature. The header contains the token type and signing algorithm. The payload contains the claims that state who the user is what permissions they have and how long the token is valid. Finally the service verifies the digital signature using the issuer’s public key to ensure the token is authentic and has not been tampered with. Only after these validations does it process the request based on the privileges defined by the token.
    - custom:
        vr_pt: |
          O protocolo OAuth dois permite que você defina escopos para limitar as operações que um token pode executar. Cada escopo especifica uma permissão detalhada para acessar apenas as funcionalidades necessárias, aumentando a segurança ao evitar que um mesmo token realize ações indevidas. No JSON Web Token existe um campo chamado expiração que indica o momento exato em que o token deixa de ser válido. Esse campo armazena a data por extenso incluindo dia mês ano hora minuto e segundo, garantindo que após esse instante o token seja automaticamente considerado expirado. Dessa forma, mesmo que alguém tente reutilizar o token depois de expirar, o sistema rejeita o acesso e protege os recursos contra uso indevido.
        vr_en: |
          The OAuth two protocol allows you to define scopes to limit the operations that a token can perform. Each scope specifies a detailed permission to access only the necessary features, enhancing security by preventing a token from performing unauthorized actions. In a JSON Web Token there is a field called expiration that indicates the exact moment when the token becomes invalid. This field stores the date in full including day month year hour minute and second ensuring that after that moment the token is automatically considered expired. In this way even if someone tries to reuse the token after it has expired the system rejects access and protects resources from misuse.
    - custom:
        vr_pt: |
          Os tokens emitidos pelo protocolo OAuth dois podem assumir dois formatos principais. O primeiro formato é o JSON Web Token que é um token auto contido no qual todas as informações sobre autenticação e autorização são codificadas em texto. Esse tipo de token não exige que o servidor mantenha sessão ou estado algum, pois o próprio token carrega tudo o que é preciso para validar permissão. Essa característica torna o sistema mais escalável e melhora o desempenho, porque o servidor evita consultas a um banco de dados ou a um serviço de autenticação a cada requisição. O segundo formato de token é o token opaco, que é apenas um identificador sem informações internas visíveis. Para verificar a validade e obter dados sobre o usuário e permissões, o servidor precisa consultar um repositório externo ou um serviço de autorização. Embora o uso de tokens opacos exija esse lookup adicional, ele permite que você altere regras de autorização centralmente sem precisar emitir novos tokens sempre que uma permissão muda. Em resumo, o JSON Web Token simplifica a infraestrutura ao ser stateless e acelerar a resposta das APIs, enquanto o token opaco oferece mais flexibilidade para gerenciamento dinâmico de permissões em tempo real.
        vr_en: |
          Tokens issued by the OAuth two protocol can take two main formats. The first format is the JSON Web Token which is a self contained token where all authentication and authorization information is encoded in text. This type of token does not require the server to maintain any session or state because the token itself carries everything needed to validate permission. This characteristic makes the system more scalable and improves performance because the server avoids lookups against a database or an authorization service for each request. The second token format is the opaque token which is simply an identifier without visible internal information. To verify its validity and retrieve user data and permissions the server must query an external store or authorization service. Although using opaque tokens requires that additional lookup it allows you to change authorization rules centrally without needing to issue new tokens each time a permission changes. In summary the JSON Web Token simplifies infrastructure by being stateless and speeding up API responses while the opaque token offers greater flexibility for dynamic permission management in real time.
    - custom:
        vr_pt: |
          Para permitir que as aplicações continuem acessando recursos sem exigir que o usuário faça login repetidamente, usamos o refresh token no protocolo OAuth dois. Esse token de renovação é emitido juntamente com o token de acesso e possui um tempo de vida mais longo. Quando o token de acesso expira, o cliente envia o token de renovação a um endpoint dedicado para obter um novo token de acesso sem interromper a experiência do usuário. No caso do JSON Web Token, a segurança é garantida pela validação da assinatura digital. Para isso, utilizamos uma chave secreta compartilhada ou um par de chaves assimétricas composto por uma chave privada para assinar e uma chave pública para verificar. Ao receber o token, o servidor decodifica o cabeçalho e o payload, recalcula a assinatura com a mesma chave e compara com a assinatura enviada para confirmar que o token não foi alterado. Esse processo assegura a autenticidade e a integridade do token antes de liberá-lo para acesso aos recursos protegidos.
        vr_en: |
          To allow applications to continue accessing resources without requiring the user to log in repeatedly, we implement the refresh token in OAuth two. This renewal token is issued alongside the access token and has a longer lifespan. When the access token expires, the client sends the refresh token to a dedicated endpoint to obtain a new access token without interrupting the user experience. In the case of JSON Web Token, security is ensured by validating its digital signature. For this we use either a shared secret key or an asymmetric key pair consisting of a private key for signing and a public key for verification. Upon receiving the token the server decodes the header and the payload recalculates the signature using the same key and compares it with the signature included in the token to confirm it has not been tampered with. This process guarantees both the authenticity and the integrity of the token before granting it access to protected resources.
    - custom:
        vr_pt: |
          O protocolo OAuth dois é o padrão mais usado para gerenciar autorização em APIs REST modernas. Ele permite que aplicações solicitem tokens de acesso em nome do usuário sem precisar compartilhar as credenciais dele, delegando permissões de forma segura e controlada. Essas permissões são definidas por escopos escritos por extenso, como leitura de perfil ou gravação de pedidos, que limitam exatamente o que cada token pode fazer. O JSON Web Token, ou JWT, é um formato de token auto contido e leve em JSON que se tornou muito popular por sua praticidade e segurança. Ele consiste em três partes escritas por extenso — cabeçalho, carga útil com declarações de autenticação e autorização, e assinatura criptográfica — todas codificadas em base sessenta e quatro. Esse design compacto facilita o transporte em cabeçalhos HTTP, reduz a necessidade de consultas constantes ao servidor de autorização e garante que o receptor possa verificar a autenticidade e a integridade do token de maneira confiável, apenas usando a chave certa.
        vr_en: |
          OAuth two is the most widely adopted standard for managing authorization in modern REST APIs. It allows applications to request access tokens on behalf of a user without exposing the user’s credentials, securely and precisely delegating permissions. These permissions are defined by scopes written out in full, such as profile read or order write, which limit exactly what each token can do. JSON Web Token or JWT is a self contained and lightweight JSON token format that has become very popular for its ease of use and security. It consists of three parts written out in full — header, payload with authentication and authorization claims, and cryptographic signature — all encoded in base sixty four. This compact design simplifies transport in HTTP headers, reduces the need for constant authorization server lookups, and ensures that the receiver can reliably verify token authenticity and integrity using the correct key.
