version: '3.1'
responses:
  utter_rbac_scopes:
    - custom:
        vr_pt: |
          O controle de acesso baseado em papéis atribui a cada função um conjunto de permissões e associa usuários a essas funções para simplificar a gestão de acessos. No OAuth dois os scopes determinam quais recursos cada token pode acessar com detalhamento. Com RBAC você agrupa permissões por time e com scopes você restringe APIs a operações específicas. Essa abordagem unificada garante segurança detalhada e conformidade durante todo o ciclo de vida das APIs
        vr_en: |
          Role based access control assigns each role a set of permissions and links users to those roles to simplify access management. In OAuth two scopes specify which resources each token can reach in detail. With RBAC you group permissions by team and with scopes you restrict API operations. This unified approach ensures fine grained security and compliance throughout the API lifecycle
    - custom:
        vr_pt: |
          No RBAC você define funções com permissões e depois vincula usuários a essas funções centralizando o controle de acesso. Os scopes em OAuth dois permitem definir permissões pontuais para chamadas de API. Quando você une RBAC e scopes consegue controlar quem e o que pode acessar de forma precisa. Esse modelo protege suas APIs com regras claras e auditáveis
        vr_en: |
          In RBAC you define roles with permissions and then link users to those roles centralizing access control. OAuth two scopes let you set precise permissions for each API call. When you combine RBAC and scopes you control who and what can access with great precision. This model protects your APIs with clear and auditable rules
    - custom:
        vr_pt: |
          A estratégia de RBAC cria perfis de acesso baseados em papéis empresariais associando usuários a esses perfis. Já os scopes em OAuth dois detalham privilégios de acesso em cada token. Usando RBAC você garante separação de responsabilidades entre equipes e com scopes limita exatamente as operações permitidas. O resultado é um controle robusto e adaptável às mudanças de requisitos de segurança
        vr_en: |
          The RBAC strategy creates access profiles based on business roles and links users to those profiles. OAuth two scopes then detail access privileges in each token. Using RBAC you enforce separation of duties across teams and with scopes you limit exactly which operations are allowed. The result is a robust control model that adapts to changing security requirements
    - custom:
        vr_pt: |
          No controle de acesso baseado em papéis definimos papéis com conjuntos de permissões e atribuimos usuários a esses papéis para facilitar o gerenciamento. Em paralelo os scopes do OAuth dois especificam recursos e ações que um token pode executar. A combinação de RBAC e scopes permite aplicar políticas de segurança granulares garantindo que cada usuário só execute o que lhe for autorizado
        vr_en: |
          In role based access control we define roles with sets of permissions and assign users to those roles to ease management. At the same time OAuth two scopes specify which resources and actions a token can perform. Combining RBAC and scopes lets you enforce granular security policies ensuring each user does only what they are permitted to do
    - custom:
        vr_pt: |
          Com RBAC criamos grupos de funções com permissões definidas e vinculamos usuários a esses grupos para centralizar a autorização. No OAuth dois usamos scopes para detalhar nível de acesso dentro de cada chamada de API. O casamento entre RBAC e scopes traz visibilidade e controle sobre quem pode fazer o que em cada ponto de integração. Isso fortalece a segurança e simplifica auditorias
        vr_en: |
          With RBAC we create role groups with defined permissions and link users to those groups to centralize authorization. In OAuth two we use scopes to detail access levels for each API call. Marrying RBAC with scopes brings visibility and control over who can do what at each integration point. This strengthens security and simplifies audits
    - custom:
        vr_pt: |
          A ferramenta de RBAC aloca permissões a funções de negócio e depois associa usuários a essas funções para gerenciar acesso de forma organizada. Os scopes do OAuth dois complementam definindo exatamente quais endpoints cada token pode invocar. Quando usamos RBAC e scopes juntos temos uma camada de segurança dupla que protege recursos e simplifica o cumprimento de políticas
        vr_en: |
          The RBAC system allocates permissions to business roles and then assigns users to those roles to manage access in an organized way. OAuth two scopes complement this by defining exactly which endpoints each token can invoke. When we use RBAC and scopes together we get a dual security layer that protects resources and simplifies policy compliance
    - custom:
        vr_pt: |
          Em um esquema RBAC definimos papéis como administrador desenvolvedor ou analista e atribuímos a cada papel as permissões necessárias. O OAuth dois scopes descrevem as operações autorizadas para cada token emitido. Unindo RBAC e scopes obtemos um controle detalhado de acesso que garante que somente funções autorizadas executem ações específicas nas APIs
        vr_en: |
          In an RBAC scheme we define roles such as administrator developer or analyst and assign each role the necessary permissions. OAuth two scopes describe the operations authorized for each issued token. By uniting RBAC and scopes we achieve detailed access control ensuring that only authorized roles perform specific actions on the APIs
    - custom:
        vr_pt: |
          O RBAC organiza permissões por papéis agrupando usuários conforme a função da empresa enquanto os scopes do OAuth dois definem os níveis de acesso de cada token. Essa combinação assegura que times tenham apenas as permissões necessárias e tokens tenham direitos restritos. O resultado é um ambiente de execução seguro e governado
        vr_en: |
          RBAC organizes permissions by roles grouping users according to their business function while OAuth two scopes define the access levels of each token. This combination ensures teams have only the necessary permissions and tokens have restricted rights. The result is a secure and governed runtime environment
    - custom:
        vr_pt: |
          Com o controle baseado em papéis definimos quem pode acessar o que ao associar usuários a papéis de negócio e conceder permissões apropriadas. Ao mesmo tempo usamos scopes no OAuth dois para designar privilégios em cada request de API. A junção de RBAC e scopes proporciona um controle preciso e auditável das operações de integração
        vr_en: |
          With role based control we define who can access what by linking users to business roles and granting appropriate permissions. At the same time we use OAuth two scopes to assign privileges in each API request. The joining of RBAC and scopes provides accurate and auditable control of integration operations
    - custom:
        vr_pt: |
          No modelo RBAC centralizamos a gestão de permissões em papéis de segurança e vinculamos usuários a esses papéis. Os scopes do OAuth dois atuam em nível de token definindo quais recursos e operações são permitidos. Juntos RBAC e scopes formam uma arquitetura de segurança em camadas garantindo proteções granulares e conformidade contínua
        vr_en: |
          In the RBAC model we centralize permission management in security roles and link users to those roles. OAuth two scopes operate at the token level specifying which resources and operations are allowed. Together RBAC and scopes form a layered security architecture ensuring granular protections and continuous compliance
