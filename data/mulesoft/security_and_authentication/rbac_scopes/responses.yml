version: '3.1'
responses:
  utter_rbac_scopes:
    - custom:
        vr_pt: |
          O controle de acesso baseado em papéis, chamado de RBAC ou controle de acesso por função, atribui a cada papel um conjunto preciso de permissões. Por exemplo, o papel de administrador pode ler e escrever todos os recursos, enquanto o papel de usuário comum pode apenas ler determinados dados. Os usuários recebem um ou mais desses papéis conforme sua função na organização, o que simplifica a administração de quem tem acesso a quê e evita privilégios desnecessários. No protocolo OAuth dois, os escopos definem, em detalhes, os recursos que um token de acesso pode utilizar. Um escopo pode permitir somente leitura de contatos, outro pode autorizar criação de novos registros, por exemplo. Ao combinar RBAC e escopos, você obtém duas camadas de segurança: uma controla quem no sistema pode solicitar o token e outra determina exatamente o que aquele token pode fazer dentro das APIs. Essa abordagem integrada garante segurança granular, pois cada usuário executa apenas as ações permitidas pelo seu papel e pelos escopos do token, além de facilitar auditoria e conformidade, uma vez que é possível rastrear quem acessou o quê e em que nível de permissão.
        vr_en: |
          Role based access control, known as RBAC, assigns to each role a precise set of permissions. For example, the administrator role may read and write all resources, while the standard user role may only read certain data. Users are granted one or more of these roles based on their function in the organization, which simplifies managing who has access to what and prevents unnecessary privileges. In the OAuth two protocol, scopes define in detail which resources an access token may use. A read contacts scope may allow only reading contact information, while a create records scope may permit creating new entries. By combining RBAC and scopes, you achieve two layers of security: the first controls which users can request a token and the second specifies exactly what that token can do within the APIs. This integrated approach ensures granular security, because each user performs only the actions allowed by their role and by the token scopes, and it also simplifies auditing and compliance by making it possible to track who accessed what and with which permission level.
    - custom:
        vr_pt: |
          No modelo de controle de acesso baseado em papéis você começa definindo cada papel com um conjunto específico de permissões que descrevem exatamente o que aquele papel pode fazer no sistema. Por exemplo, você pode ter o papel de gerente com permissão para criar relatórios e aprovar transações, e o papel de analista com permissão apenas para consultar dados. Em seguida, você associa cada usuário aos papéis correspondentes ao seu cargo e às suas responsabilidades, de forma que cada pessoa receba somente os privilégios estritamente necessários. No protocolo OAuth dois, os escopos são usados para detalhar as ações permitidas em cada chamada de API. Um escopo de leitura pode liberar apenas a consulta de informações, enquanto um escopo de escrita pode autorizar a criação ou atualização de registros. Esses escopos ficam vinculados ao token de acesso emitido, garantindo que mesmo quem tem permissão para requisitar um token não possa realizar operações não autorizadas. Ao combinar o modelo de papéis com as regras de escopo, você obtém um sistema de segurança em duas camadas. A primeira camada, o RBAC, controla quais papéis cada usuário exerce e agrupa permissões por função ou equipe. A segunda camada, os escopos, limita de forma precisa o que cada token de acesso pode fazer nas APIs. Dessa forma, você garante que somente usuários corretos obtenham acessos e que cada acesso seja usado exatamente para o propósito autorizado, o que fortalece a segurança, facilita auditorias e mantém as políticas sempre claras e fáceis de manter.
        vr_en: |
          In the role based access control model you start by defining each role with a specific set of permissions that describe exactly what that role can do in the system. For example, you might have a manager role with permission to create reports and approve transactions, and an analyst role with permission only to view data. Next you assign each user to the roles that match their position and responsibilities so that every person has only the privileges they truly need. In the OAuth two protocol scopes are used to detail the actions allowed in each API call. A read scope might allow only data retrieval, while a write scope might authorize creation or updates of records. These scopes are attached to the issued access token, ensuring that even users who can request a token cannot perform operations they are not permitted to do. By combining the role based model with scope rules you achieve a two layer security system. The first layer, RBAC, controls which roles each user holds and groups permissions by role or team. The second layer, scopes, precisely limits what each access token can do in the APIs. This ensures that only the right users obtain access and that every access is used exactly for the authorized purpose, which strengthens security, simplifies audits and keeps policies clear and easy to maintain.
    - custom:
        vr_pt: |
          A estratégia de controle de acesso baseado em papéis começa com a definição de perfis de acesso que refletem as funções reais dentro da empresa, como administrador de sistema, desenvolvedor ou analista de negócios. Cada um desses perfis recebe um conjunto claro de permissões, por exemplo, acesso a relatórios financeiros ou permissão para realizar ajustes em configurações de sistema. Em seguida, cada usuário é vinculado ao perfil que corresponde às suas responsabilidades diárias, garantindo que ele receba apenas as permissões estritamente necessárias para desempenhar seu trabalho. Ao mesmo tempo, o protocolo OAuth dois utiliza escopos para detalhar, de maneira ainda mais específica, quais operações cada token de acesso pode executar em uma API. Um escopo pode autorizar somente a leitura de dados de clientes, enquanto outro pode liberar apenas a criação de novos registros de pedidos. Esses escopos são embalados dentro do token e validados sempre que a API recebe uma requisição, impedindo qualquer ação não permitida mesmo que o usuário possua um perfil de alto nível. Combinando RBAC e escopos do OAuth dois você alcança um modelo de segurança em duas camadas. A primeira camada, RBAC, organiza o acesso em perfis de papéis que simplificam o gerenciamento de privilégios por equipe ou departamento. A segunda camada, os escopos, impõe restrições finas em cada token, garantindo que cada chamada de API execute apenas o que foi explicitamente autorizado. Essa abordagem dupla fornece um controle de acesso robusto, ajustável a novas necessidades de segurança, fácil de auditar e com baixo risco de exposição indevida de recursos.
        vr_en: |
          The role based access control strategy starts with defining access profiles that mirror real business roles such as system administrator, developer or business analyst. Each of these profiles is assigned a clear set of permissions, for example access to financial reports or permission to make system configuration changes. Then each user is linked to the profile that matches their daily responsibilities, ensuring they receive only the permissions strictly necessary to perform their job. At the same time the OAuth two protocol uses scopes to detail even more precisely which operations each access token can perform on an API. A scope might authorize only the reading of customer data while another might allow only the creation of new order records. These scopes are embedded within the token and validated whenever the API receives a request, preventing any unauthorized action even if the user holds a high level profile. By combining RBAC and OAuth two scopes you achieve a two layer security model. The first layer, RBAC, organizes access into role profiles that simplify privilege management by team or department. The second layer, scopes, enforces fine grained restrictions on each token, ensuring that every API call performs only what has been explicitly authorized. This dual approach provides robust access control, adaptable to evolving security needs, easy to audit and with minimal risk of unauthorized resource exposure.
    - custom:
        vr_pt: |
          No modelo de controle de acesso baseado em papéis, começamos definindo cada papel com um conjunto claro de permissões. Por exemplo, o papel de administrador pode ter permissão para criar, atualizar e excluir recursos, enquanto o papel de visualizador tem apenas permissão para consultar informações. Em seguida, associamos cada usuário ao papel que corresponde ao seu perfil de trabalho, de modo que ele receba apenas as permissões estritamente necessárias para suas tarefas diárias. Paralelamente, no protocolo OAuth dois, utilizamos escopos para detalhar exatamente quais recursos uma determinada credencial pode acessar e quais ações ela pode executar. Cada escopo é como um carimbo de autorização colado dentro do token de acesso, indicando se é possível apenas ler dados, apenas criar novas entradas ou executar todas as operações permitidas. Ao unir os dois modelos, aproveitamos o melhor de cada abordagem. O controle de acesso baseado em papéis simplifica a gestão centralizada de permissões em nível de usuário ou equipe, enquanto os escopos do OAuth dois garantem segurança em nível de chamada de API. Com essa combinação, construímos uma camada de proteção em duas etapas que impede que qualquer token ou conta realize operações não autorizadas, reforçando a governança e reduzindo drasticamente o risco de acessos indevidos.
        vr_en: |
          In role based access control we start by defining each role with a clear set of permissions. For example, the administrator role may have permission to create, update and delete resources, while the viewer role only has permission to read information. Next, we assign each user to the role that matches their job profile so they receive only the permissions strictly necessary for their daily tasks. In parallel, in the OAuth two protocol we use scopes to specify exactly which resources a given credential can access and which actions it can perform. Each scope acts like an authorization label embedded in the access token, indicating whether it can only read data, only create new entries or perform all allowed operations. By combining these two models we take advantage of their strengths. Role based access control simplifies centralized permission management at the user or team level, while OAuth two scopes ensure security at the individual API call level. With this combination we build a two step protection layer that prevents any token or account from performing unauthorized operations, strengthening governance and greatly reducing the risk of improper access.
    - custom:
        vr_pt: |
          Com o controle de acesso baseado em papéis criamos grupos de funções atribuindo a cada grupo um conjunto exclusivo de permissões. Em seguida, vinculamos cada usuário ao grupo que reflete sua área de atuação, de modo a centralizar o processo de autorização e garantir que cada pessoa receba apenas os privilégios necessários para suas tarefas. No protocolo OAuth dois utilizamos escopos para especificar com exatidão o que cada token de acesso pode fazer, seja ler dados, criar novos registros ou excluir informações. Ao combinar o controle de acesso baseado em papéis e os escopos do OAuth dois, obtemos uma visibilidade completa sobre quem pode acessar cada ponto de integração e quais operações cada credencial pode executar. Esse modelo integrado eleva significativamente a segurança do ambiente, facilita a realização de auditorias e assegura o cumprimento de normas e regulamentos corporativos.
        vr_en: |
          With role based access control we create role groups by assigning each group a unique set of permissions. Then we link each user to the group that matches their area of responsibility, centralizing the authorization process and ensuring that every person receives only the privileges needed for their tasks. In the OAuth two protocol we use scopes to specify exactly what each access token can do, whether it is reading data, creating new records or deleting information. By combining role based access control with OAuth two scopes we gain full visibility into who can reach each integration point and which operations each credential can perform. This integrated model greatly enhances the security of the environment, simplifies auditing and ensures compliance with corporate policies and regulations.
    - custom:
        vr_pt: |
          A ferramenta de controle de acesso baseado em papéis, conhecida como RBAC, começa com a definição de funções de negócio que representam responsabilidades na empresa. Para cada função, são atribuídas permissões específicas, como a capacidade de ler dados de determinado serviço, criar novos registros ou excluir informações obsoletas. Em seguida, cada usuário é associado àquela função que corresponde ao seu papel na organização, de maneira que as permissões fiquem claras e centralizadas. Paralelamente, no protocolo OAuth dois, definimos escopos de acesso que detalham exatamente quais rotas de API e quais operações cada token de acesso pode invocar. Esses escopos podem especificar, por exemplo, se o token pode ler apenas informações de clientes ou se pode também criar ou atualizar registros. Ao usar RBAC e escopos juntos, construímos uma camada dupla de segurança: a primeira camada garante que só as pessoas com o papel correto obtenham um token, e a segunda camada limita o que esse token pode fazer. Essa combinação fortalece a proteção dos recursos, simplifica a aplicação das políticas de segurança e torna todo o processo mais transparente para administradores e auditores.
        vr_en: |
          The role based access control system, known as RBAC, starts by defining business roles that reflect responsibilities within the company. For each role, specific permissions are granted, such as the ability to read data from a particular service, create new records or delete outdated information. Then each user is assigned to the role that matches their position in the organization, so that permissions are clear and centralized. In parallel, within the OAuth two protocol we define access scopes that detail exactly which API routes and which operations each access token may invoke. These scopes can specify, for example, whether the token may only read customer information or whether it may also create or update records. By using RBAC and scopes together, we build a dual layer of security: the first layer ensures that only people with the correct role obtain a token, and the second layer limits what that token can do. This combination strengthens resource protection, simplifies enforcement of security policies and makes the entire process more transparent for administrators and auditors.
    - custom:
        vr_pt: |
          Em um modelo de controle de acesso baseado em papéis definimos funções como administrador, desenvolvedor e analista, atribuindo a cada uma delas um conjunto completo de permissões que refletem suas responsabilidades na organização. Por exemplo, o papel de administrador pode ter permissão para criar, atualizar e excluir configurações globais, o desenvolvedor pode ter permissão para ler e gravar dados em ambientes de teste, e o analista pode ter permissão apenas para consultar relatórios. Paralelamente, no protocolo OAuth dois utilizamos escopos para detalhar exatamente quais operações cada token de acesso pode executar, como ler somente registros de clientes ou atualizar somente informações de pedidos. Ao combinar RBAC com escopos, obtemos um controle granular de acesso, garantindo que somente usuários com papéis e tokens adequados possam realizar ações específicas nas APIs. Essa estratégia evita abusos, mantém a conformidade com as políticas de segurança e simplifica a auditoria das atividades de cada usuário.
        vr_en: |
          In a role based access control model we define roles such as administrator, developer and analyst, assigning each role a full set of permissions that reflect their responsibilities within the organization. For example, the administrator role may have permission to create, update and delete global configurations, the developer may have permission to read and write data in test environments, and the analyst may have permission only to query reports. In parallel, within the OAuth two protocol we use scopes to detail exactly which operations each access token can perform, such as reading only customer records or updating only order information. By combining RBAC with scopes we achieve granular access control, ensuring that only users with appropriate roles and tokens can perform specific actions on the APIs. This strategy prevents misuse, maintains compliance with security policies and simplifies auditing of each user’s activities.
    - custom:
        vr_pt: |
          O controle de acesso baseado em papéis, conhecido como RBAC, agrupa usuários em funções específicas de acordo com seu papel dentro da empresa, atribuindo a cada função um conjunto detalhado de permissões. Por exemplo, a função de gerente pode incluir permissão para aprovar solicitações, a função de desenvolvedor pode ter permissão para criar e atualizar dados em ambientes de teste, e a função de leitor pode ter permissão apenas para consultar relatórios. Em paralelo, no protocolo OAuth dois utilizamos escopos para especificar exatamente quais recursos e operações cada token de acesso pode executar. Por exemplo, um token pode ter o escopo de leitura de dados de cliente ou o escopo de somente gravação de registros de pedidos. Ao combinar RBAC com escopos, garantimos que cada usuário receba apenas as permissões absolutamente necessárias para suas tarefas diárias e que cada token contenha apenas os direitos mínimos essenciais. Dessa forma, criamos um ambiente de execução altamente seguro, organizado e fácil de auditar, no qual nenhum usuário ou aplicação pode realizar ações não autorizadas.
        vr_en: |
          Role based access control, or RBAC, groups users into specific functions according to their role within the organization, assigning each function a detailed set of permissions. For example, the manager function might include permission to approve requests, the developer function might have permission to create and update data in test environments, and the reader function might have permission only to view reports. In parallel, within the OAuth two protocol we use scopes to specify exactly which resources and operations each access token can perform. For example, a token might have the scope to read customer data or the scope to write only order records. By combining RBAC with scopes we ensure that each user receives only the permissions absolutely necessary for their daily tasks and that each token contains only the minimum essential rights. In this way we create a highly secure, organized and easy to audit runtime environment in which no user or application can perform unauthorized actions.
    - custom:
        vr_pt: |
          Com o controle baseado em papéis, atribuimos a cada usuário funções de negócio claras, como administrador, analista ou desenvolvedor, e concedemos as permissões exatas necessárias para cada função, garantindo que ninguém receba privilégios além do seu escopo de trabalho. Em paralelo, no OAuth dois usamos escopos definidos cuidadosamente para cada chamada de API, por exemplo o escopo de leitura de clientes ou o escopo de criação de pedidos, controlando em detalhe o que o token pode fazer a cada requisição. Ao unir RBAC e escopos, obtemos um mecanismo completo em que a combinação de função de usuário e escopo de token determina precisamente quais operações são permitidas. Esse modelo integrado torna o controle de acesso fácil de auditar, pois registra quem fez o quê e em que contexto, e simplifica a gestão de segurança, pois as alterações nas funções ou nos escopos podem ser aplicadas sem impacto em outros componentes. Com isso, garantimos um ambiente altamente seguro e em conformidade, no qual cada ação na API é autorizada, registrada e restrita ao mínimo essencial.
        vr_en: |
          With role based control we assign each user clear business functions, such as administrator, analyst or developer, and grant exactly the permissions needed for each function, ensuring that no one receives privileges beyond their work scope. In parallel, in OAuth two we use carefully defined scopes for each API call, for example the scope for reading customer data or the scope for creating orders, governing in detail what the token can do on each request. By combining RBAC and scopes we achieve a complete mechanism in which the pairing of user role and token scope precisely determines which operations are allowed. This integrated model makes access control easy to audit, as it records who performed what and in which context, and simplifies security management, since changes to roles or scopes can be applied without affecting other components. In this way we ensure a highly secure and compliant environment in which every action on the API is authorized, logged and restricted to the minimum essential.
    - custom:
        vr_pt: |
          No modelo de controle de acesso baseado em papéis, conhecido como RBAC, toda a gestão de permissões fica centralizada em perfis ou papéis bem definidos. Cada papel recebe um conjunto de privilégios específicos que determinam exatamente o que seus detentores podem ou não podem fazer. Em seguida, atribuímeos usuários a esses papéis de acordo com suas funções na empresa, o que simplifica muito o processo de administração e garante que cada colaborador tenha apenas o nível de acesso necessário para realizar suas tarefas sem privilégios desnecessários. Paralelamente, no protocolo OAuth dois, os escopos de autorização operam no nível do token. Cada token recebe uma lista de escopos que detalha quais recursos e ações aquele token tem permissão para acessar. Com isso, mesmo que um usuário possua um papel amplo, o escopo do token pode restringir ainda mais as operações permitidas em cada chamada de API. Ao combinar RBAC com escopos de token, criamos uma arquitetura de segurança em camadas. A primeira camada, o papel de segurança, define o conjunto geral de permissões; a segunda camada, o escopo do token, limita cada chamada a operações específicas. Esse modelo integrado garante proteções granulares, pois cada ação é validada duas vezes — primeiro pelo papel do usuário e depois pelo escopo do token — e facilita auditorias detalhadas e contínuas para assegurar conformidade com as políticas internas da empresa e com regulamentações externas.
        vr_en: |
          In the role based access control model, known as RBAC, all permission management is centralized into well defined profiles or roles. Each role is assigned a specific set of privileges that determine exactly what its holders can or cannot do. Next, we assign users to these roles according to their functions in the organization, which greatly simplifies the administration process and ensures that each person has only the level of access needed to perform their tasks without unnecessary privileges. In parallel, in the OAuth two protocol, authorization scopes operate at the token level. Each token is granted a list of scopes that details which resources and actions that token is allowed to access. This means that even if a user holds a broad role, the token scope can further restrict the operations permitted on each API call. By combining RBAC with token scopes, we create a layered security architecture. The first layer, the security role, defines the overall permission set; the second layer, the token scope, constrains each call to specific actions. This integrated model ensures granular protections, as every action is validated twice — first by the user’s role and then by the token scope — and it makes detailed, ongoing audits easier to ensure compliance with internal company policies and external regulations.
