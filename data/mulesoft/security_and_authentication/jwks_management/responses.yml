version: '3.1'
responses:
  utter_jwks_management:
    - custom:
        vr_pt: |
          A gestão de chaves JWKS consiste em disponibilizar um conjunto de chaves públicas denominado JSON Web Key Set por meio de um endereço web conhecido como URI do JWKS. Essas chaves públicas permitem verificar se os tokens JWT recebidos são autênticos e não foram alterados. No ambiente da MuleSoft, aplica-se a política de validação de JWT direcionando-a para o URI do JWKS correspondente. O processo completo de gestão dessas chaves envolve vários passos importantes. Primeiro, é necessário planejar a rotação periódica das chaves para garantir que chaves comprometidas sejam substituídas por novas de forma segura e previsível. Segundo, deve-se configurar a atualização automática do cache local do JWKS para que as chamadas de validação utilizem sempre as chaves mais recentes, evitando atrasos nas requisições. Terceiro, é fundamental definir um arquivo de confiança ou truststore que contenha certificados válidos para estabelecer conexões HTTPS seguras ao buscar as chaves no endpoint remoto. Quarto, em caso de indisponibilidade do provedor de chaves, o fluxo deve prever um mecanismo de contingência que recorra a um segundo provedor de chave ou mantenha a última versão em cache até que o serviço principal retorne ao ar. Finalmente, recomenda-se monitorar métricas como tempo de resposta e taxa de sucesso da atualização das chaves, além de registrar em logs detalhados o emissor consultado, o resultado da verificação e qualquer eventual erro durante o processo.
        vr_en: |
          JWKS key management consists of providing a set of public keys called JSON Web Key Set through a web address known as the JWKS URI. These public keys allow verification that received JWT tokens are authentic and have not been tampered with. In the MuleSoft environment, you apply the JWT validation policy by pointing it to the corresponding JWKS URI. The complete management process involves several important steps. First, you must plan periodic key rotation to ensure that any compromised keys are replaced by new ones in a secure and predictable manner. Second, you need to configure automatic updates of the local JWKS cache so that validation calls always use the most recent keys, avoiding request delays. Third, it is essential to define a truststore file containing valid certificates to establish secure HTTPS connections when retrieving keys from the remote endpoint. Fourth, in case the primary key provider becomes unavailable, the flow should include a contingency mechanism that falls back to a secondary key provider or retains the last cached version until the main service is restored. Finally, it is recommended to monitor metrics such as response time and cache update success rate, as well as record detailed logs of the issuer consulted, the verification outcome, and any errors encountered during the process.
    - custom:
        vr_pt: |
          No gerenciamento de JWKS, é publicado um arquivo no formato JSON que contém todas as chaves públicas necessárias para validar os tokens JWT. Esse arquivo fica disponível em um endereço web fixo, conhecido como URI do JWKS. Na plataforma MuleSoft, você configura a política de validação de JWT apontando para esse URI, garantindo que todas as chamadas às APIs usem essas chaves para confirmar a autenticidade e a integridade dos tokens recebidos. O ciclo de vida completo desse conjunto de chaves inclui a renovação programada das chaves em intervalos definidos para evitar o uso de chaves desatualizadas, a recarga automática do cache que armazena as chaves em memória de forma a preservar o desempenho, a configuração de um armazenamento de certificados confiáveis para estabelecer conexões seguras via HTTPS ao buscar o arquivo de chaves e a implementação de um mecanismo de contingência que aciona um provedor de chave secundário ou mantém a versão em cache caso o serviço principal de JWKS fique indisponível. Além disso, recomenda-se registrar em logs todos os eventos de atualização e falha de obtenção de chaves e monitorar métricas como tempo de busca e taxa de erro para garantir visibilidade e resolver rapidamente qualquer problema de validação.
        vr_en: |
          In JWKS management, you publish a JSON file containing all the public keys needed to validate JWT tokens. This file is made available at a fixed web address known as the JWKS URI. On the MuleSoft platform, you configure the JWT validation policy to point to this URI, ensuring that all API calls use these keys to verify the authenticity and integrity of incoming tokens. The entire key lifecycle includes scheduled renewal of keys at defined intervals to prevent using outdated keys, automatic cache reload of keys in memory to preserve performance, configuration of a truststore containing trusted certificates to establish secure HTTPS connections when fetching the key file, and implementation of a contingency mechanism that switches to a secondary key provider or retains the cached version if the primary JWKS service becomes unavailable. Additionally, it is recommended to log every key update and fetch failure event and to monitor metrics such as fetch time and error rate to maintain visibility and quickly address any validation issues.
    - custom:
        vr_pt: |
          Gerenciar o JWKS significa manter um conjunto de chaves públicas em formato JSON disponível em um endpoint web para que as suas APIs possam consultá‐lo sempre que precisarem validar um token JWT. Na plataforma Anypoint, isso é feito aplicando a política de validação de JWT e configurando o endereço do JWKS como fonte das chaves. É fundamental planejar a rotação periódica dessas chaves para evitar o uso de material criptográfico antigo, garantindo assim a segurança das comunicações. Para preservar o desempenho, configure o cache de chaves de forma que ele seja atualizado automaticamente sempre que houver alteração no JWKS, evitando latência desnecessária nas requisições. Além disso, implemente um truststore que contenha apenas certificados confiáveis para estabelecer conexões seguras via HTTPS com o endpoint do JWKS. Por fim, prepare mecanismos de fallback que redirecionem as consultas para provedores de chave alternativos ou para uma versão em cache caso o provedor principal fique fora do ar, e registre em logs detalhados cada evento de rotação, atualização ou falha de obtenção de chaves para facilitar auditorias e diagnóstico de problemas.
        vr_en: |
          Managing JWKS means maintaining a set of public keys in JSON format accessible through a web endpoint so that your APIs can retrieve them whenever they need to validate a JWT token. On the Anypoint platform, you achieve this by applying the JWT validation policy and specifying the JWKS endpoint as the source of the keys. It is essential to schedule regular key rotation to prevent the use of outdated cryptographic material, thereby preserving security. To maintain performance, configure the key cache so that it refreshes automatically whenever the JWKS changes, avoiding unnecessary latency in API requests. In addition, set up a truststore containing only trusted certificates to establish secure HTTPS connections to the JWKS endpoint. Finally, implement fallback mechanisms that point to alternate key providers or to a cached version if the primary provider becomes unavailable, and log in detail every key rotation, update or fetch failure event to support auditing and troubleshooting.
    - custom:
        vr_pt: |
          A estratégia de gestão de chave JWKS consiste em disponibilizar um arquivo em formato JSON contendo todas as chaves públicas que as APIs irão usar para validar os tokens JWT recebidos. Esse arquivo fica acessível por meio de um endpoint web, conhecido como URI do JWKS, e deve ser configurado na política de validação de JWT da plataforma MuleSoft. Para manter a segurança, é essencial planejar a rotação periódica das chaves, garantindo que chaves antigas sejam substituídas por novas regularmente. Para preservar o desempenho das chamadas, deve-se configurar o cache do JWKS de forma que ele seja atualizado automaticamente sempre que houver mudança no arquivo de chaves, evitando atrasos nas requisições. Além disso, é necessário preparar um truststore contendo apenas certificados confiáveis para estabelecer conexões seguras por meio do protocolo TLS com o endpoint do JWKS. Por fim, deve-se definir planos de contingência que acionem provedores de chave alternativos ou utilizem o cache local como fallback sempre que o serviço principal de JWKS estiver indisponível, e registrar em logs detalhados cada evento de rotação, atualização ou falha de obtenção de chaves para permitir auditoria e diagnóstico eficiente de problemas.
        vr_en: |
          The JWKS management strategy consists of providing a JSON file that contains all public keys used by your APIs to verify incoming JWT tokens. This file is made accessible through a web endpoint called the JWKS URI, and you must configure the JWT Validation policy on the MuleSoft platform to reference this URI. To maintain security, you should schedule regular key rotation so that old keys are replaced with new ones on a recurring basis. To preserve API performance, configure the JWKS cache so that it refreshes automatically whenever the key file changes, preventing lookup delays. Additionally, set up a truststore containing only trusted certificates to establish secure TLS connections with the JWKS endpoint. Finally, define contingency plans that switch to alternate key providers or fall back to the local cache whenever the primary JWKS service is unavailable, and log every key rotation, cache update or key retrieval failure in detail to support thorough auditing and efficient troubleshooting.
    - custom:
        vr_pt: |
          Publicar e manter um JWKS significa criar um arquivo no formato JSON que contenha todas as chaves públicas usadas para validar tokens JWT e disponibilizar esse arquivo em um endereço web fixo, chamado URI do JWKS. As APIs configuradas na plataforma MuleSoft chamam esse endereço para buscar as chaves toda vez que precisam verificar a autenticidade de um token recebido. Para garantir segurança, o processo deve incluir a rotação automática das chaves em intervalos regulares, substituindo chaves antigas por novas para evitar o uso de chaves que possam ter sido comprometidas. Para não prejudicar a velocidade das APIs, recomenda-se usar um cache inteligente que armazene localmente as chaves por um período determinado, atualizando o cache sempre que o arquivo do JWKS mudar. É importante também ajustar o truststore com certificados confiáveis para estabelecer conexões seguras usando HTTPS com o endpoint do JWKS. Por fim, deve-se implementar um mecanismo de fallback que permita às APIs usar uma fonte alternativa das chaves ou utilizar o cache existente quando o serviço principal de JWKS não estiver disponível. Todas essas etapas devem ser registradas em logs detalhados para permitir auditoria e facilitar a resolução de problemas.
        vr_en: |
          Publishing and maintaining a JWKS means creating a JSON file that contains all public keys used to validate JWT tokens and exposing that file at a fixed web address known as the JWKS URI. APIs configured on the MuleSoft platform call this URI each time they need to verify the authenticity of a received token. To ensure security, the process should include automatic key rotation at regular intervals, replacing old keys with new ones to prevent compromised keys from being used. To preserve API performance, it is recommended to use an intelligent cache that stores keys locally for a defined period, refreshing the cache whenever the JWKS file changes. It is also important to configure the truststore with trusted certificates to establish secure HTTPS connections with the JWKS endpoint. Finally, implement a fallback mechanism that allows APIs to use an alternate key source or rely on the existing cache when the primary JWKS service is unavailable. All these steps should be logged in detail to enable auditing and facilitate troubleshooting.
    - custom:
        vr_pt: |
          No gerenciamento de JWKS, você hospeda um arquivo no formato JSON que contém todas as chaves públicas necessárias para verificar tokens JWT em um endpoint web, acessível por meio de um endereço chamado URI do JWKS. Nas APIs da plataforma MuleSoft, configura-se a política de validação JWT apontando para esse URI, de modo que toda vez que um token chega, a API recupera as chaves e verifica sua assinatura e integridade. Para manter o sistema seguro, é fundamental definir um processo de rotação programada das chaves públicas, substituindo chaves antigas por novas em períodos regulares. Ao mesmo tempo, deve-se configurar um cache local do JWKS que recarrega automaticamente sempre que o arquivo no endpoint for atualizado, evitando atrasos em chamadas subsequentes. É importante também ajustar o truststore do ambiente com certificados confiáveis para garantir conexões seguras por meio de HTTPS com o endpoint do JWKS. Por fim, implemente um mecanismo de fallback que permita à API continuar usando o cache existente ou recorrer a um segundo provedor de chaves no caso de indisponibilidade do serviço principal, garantindo alta disponibilidade e resiliência nas validações de token.
        vr_en: |
          In JWKS management, you host a JSON file containing all the public keys needed to verify JWT tokens at a web endpoint, accessed via a URI known as the JWKS URI. In MuleSoft APIs, you configure the JWT Validation policy to point to this URI so that whenever a token arrives, the API retrieves the keys and checks its signature and integrity. To keep the system secure, it is essential to define a scheduled key rotation process that replaces old public keys with new ones at regular intervals. At the same time, you should configure a local JWKS cache that automatically reloads whenever the file at the endpoint is updated, avoiding delays on subsequent calls. It is also important to adjust the environment truststore with trusted certificates to ensure secure HTTPS connections to the JWKS endpoint. Finally, implement a fallback mechanism that allows the API to continue using the existing cache or switch to a secondary key provider in case the primary service is unavailable, ensuring high availability and resilience in token validations.
    - custom:
        vr_pt: |
          Gerenciar um JWKS significa disponibilizar um conjunto de chaves públicas em um arquivo JSON acessível por meio de um endereço web, que serve como fonte de verdade para verificar a autenticidade e a integridade dos tokens JWT. Na plataforma MuleSoft, você aplica a política de validação JWT apontando para esse endereço, garantindo que cada solicitação seja validada com as chaves corretas. O ciclo de vida desse conjunto de chaves envolve três etapas principais. Primeiro, a rotação periódica das chaves públicas, substituindo antigas por novas de forma programada para evitar que chaves comprometidas continuem em uso. Segundo, a manutenção de um cache local do JWKS, que atualiza automaticamente sempre que o arquivo no servidor é alterado, assegurando respostas rápidas sem impactar o desempenho das APIs. Terceiro, a configuração do truststore do ambiente com certificados de autoridade confiáveis, estabelecendo conexões seguras por HTTPS com o provedor de chaves. Por fim, é fundamental implementar um plano de contingência que ative fontes alternativas de chaves quando o serviço principal ficar indisponível, permitindo que as validações continuem sem interrupção e garantindo alta disponibilidade das APIs mesmo em cenários de falha.
        vr_en: |
          Managing a JWKS means providing a set of public keys in a JSON file that is accessible via a web endpoint, serving as the single source of truth for verifying the authenticity and integrity of JWT tokens. In the MuleSoft platform, you apply the JWT validation policy to that endpoint, ensuring every request is checked against the correct keys. The lifecycle of this key set involves three main stages. First, scheduled key rotation replaces old public keys with new ones at defined intervals to prevent compromised keys from being used. Second, a local JWKS cache automatically refreshes whenever the file on the server changes, guaranteeing fast responses without degrading API performance. Third, the environment truststore is configured with trusted certificate authorities, securing HTTPS connections to the key provider. Finally, it is essential to implement a contingency plan that activates alternative key sources when the primary service becomes unavailable, allowing validations to continue uninterrupted and ensuring high availability of your APIs even under failure conditions.
    - custom:
        vr_pt: |
          O gerenciamento de chaves JWKS é o processo de tornar disponível um conjunto de chaves públicas em formato JSON por meio de um endereço web, conhecido como URI do JWKS. Essas chaves são usadas para verificar se os tokens JWT recebidos são autênticos e não foram alterados. Na plataforma Anypoint, você configura a política de validação JWT apontando para esse endereço, garantindo que todas as chamadas às APIs passem por essa verificação. Para manter esse mecanismo seguro e confiável, siga esta sequência de ações escritas por extenso: Primeiro, planeje a rotação periódica das chaves públicas de forma automatizada, substituindo as chaves antigas por novas em intervalos regulares, de modo a evitar o uso de chaves comprometidas. Segundo, configure o cache local do JWKS para atualizar-se automaticamente sempre que o arquivo de chaves mudar, garantindo respostas rápidas sem afetar o desempenho das APIs. Terceiro, ajuste o truststore do ambiente para incluir somente certificados de autoridade confiáveis, assegurando conexões por TLS seguras ao acessar o provedor de chaves. Quarto, implemente um mecanismo de contingência que direcione as validações para provedores alternativos de chaves caso o serviço principal fique indisponível, mantendo a disponibilidade das APIs mesmo em situações de falha. Essas etapas tornam o gerenciamento de chaves JWKS completo, seguro e resiliente, facilitando a manutenção por parte de iniciantes e garantindo a integridade das suas APIs.
        vr_en: |
          JWKS key management is the process of making a set of public keys available in JSON format through a web address called the JWKS URI. These keys are used to verify that incoming JWT tokens are authentic and have not been tampered with. On the Anypoint platform, you configure the JWT validation policy to point to this address, ensuring every API call is checked against these keys. To keep this mechanism secure and reliable, follow this sequence of actions written out in full: First, plan automated periodic rotation of the public keys by replacing old keys with new ones at regular intervals to prevent the use of compromised keys. Second, configure a local JWKS cache to refresh automatically whenever the key file changes, ensuring fast responses without impacting API performance. Third, adjust the environment truststore to include only trusted certificate authorities, ensuring secure TLS connections to the key provider. Fourth, implement a contingency mechanism that routes validations to alternative key providers if the primary service becomes unavailable, maintaining API availability even under failure conditions. These steps make JWKS key management complete, secure and resilient, helping beginners follow best practices and ensuring API integrity.
    - custom:
        vr_pt: |
          Na prática, o gerenciamento de JWKS consiste em publicar um arquivo JSON que contém todas as chaves públicas necessárias para verificar a autenticidade dos tokens JWT. Esse arquivo deve ficar disponível em um endereço HTTP seguro, chamado URI do JWKS, para que as APIs possam buscar as chaves sempre que receberem um token. Primeiro passo: configure a política de validação JWT no MuleSoft para apontar para esse URI, garantindo que toda chamada à API utilize as chaves corretas. Segundo passo: defina um cronograma para a rotação programada das chaves, substituindo periodicamente as chaves antigas por novas de forma automatizada, para evitar o uso de chaves comprometidas. Terceiro passo: ajuste o cache interno de JWKS para atualizar automaticamente sempre que o arquivo de chaves for alterado, mantendo a performance das APIs sem expor dados desatualizados. Quarto passo: configure o truststore da aplicação para aceitar apenas certificados de autoridades confiáveis, assegurando que as conexões HTTPS ao serviço de chaves sejam sempre seguras e autenticadas. Quinto passo: implemente um fluxo de fallback que, em caso de falha ou indisponibilidade do provedor principal de chaves, direcione a validação para uma fonte alternativa previamente configurada, mantendo a disponibilidade das APIs mesmo sob falhas. Essas etapas permitem um gerenciamento de chaves JWKS claro, seguro e resiliente, tornando todo o processo mais fácil de entender e manter, especialmente para quem está iniciando em APIs e segurança.
        vr_en: |
          In practice, JWKS management involves publishing a JSON file that contains all the public keys needed to verify the authenticity of JWT tokens. This file must be hosted at a secure HTTP address, known as the JWKS URI, so that APIs can fetch the keys whenever they receive a token. First step: configure MuleSoft’s JWT validation policy to point to this URI, ensuring every API call uses the correct keys. Second step: set up a schedule for automated key rotation, periodically replacing old keys with new ones to prevent use of compromised keys. Third step: adjust the internal JWKS cache to refresh automatically whenever the key file changes, maintaining API performance without serving stale data. Fourth step: configure the application truststore to trust only certificates from reliable authorities, ensuring HTTPS connections to the key service are always secure and authenticated. Fifth step: implement a fallback workflow that, in case of failure or unavailability of the primary key provider, directs validation to a preconfigured alternative source, maintaining API availability even during outages. Following these steps makes JWKS key management clear, secure and resilient, simplifying the process for those new to API security.
    - custom:
        vr_pt: |
          O gerenciamento de JWKS é o processo de criar um conjunto de chaves públicas no formato JSON Web Key Set e disponibilizá-lo por meio de um endereço web, chamado URI do JWKS, para que as APIs possam validar os tokens JWT recebidos. No ambiente MuleSoft, você configura a política de validação JWT para apontar para essa URI, garantindo que todas as requisições passem pela verificação das chaves corretas. Primeiro, defina um cronograma para a rotação periódica das chaves, substituindo automaticamente as chaves antigas por novas para evitar riscos de comprometimento. Em seguida, ajuste o mecanismo de cache do JWKS para recarregar automaticamente as chaves sempre que o arquivo for atualizado, assegurando alta performance sem usar chaves desatualizadas. Depois, configure o truststore da aplicação para confiar apenas em certificados emitidos por autoridades reconhecidas, garantindo que a comunicação HTTPS com o provedor de chaves seja sempre segura e autenticada. Por fim, implemente um fluxo de fallback que, em caso de falha ou indisponibilidade do endpoint principal, redirecione a validação para uma fonte secundária previamente configurada. Dessa forma, as APIs permanecem disponíveis mesmo diante de problemas no serviço de chaves, mantendo a integridade e a segurança das operações.
        vr_en: |
          JWKS management is the process of creating a set of public keys in the JSON Web Key Set format and making it available through a web address, known as the JWKS URI, so that APIs can validate incoming JWT tokens. In the MuleSoft environment, you configure the JWT validation policy to point to this URI, ensuring all requests are checked against the correct keys. First, establish a schedule for periodic key rotation, automatically replacing old keys with new ones to prevent compromise. Next, tune the JWKS caching mechanism to automatically reload keys whenever the file is updated, ensuring high performance without serving stale keys. Then, configure the application truststore to trust only certificates issued by recognized authorities, ensuring HTTPS communication with the key provider is always secure and authenticated. Finally, implement a fallback workflow that, in the event of failure or unavailability of the primary endpoint, redirects validation to a preconfigured secondary source. This ensures APIs remain available even when the key service has issues, preserving the integrity and security of operations.
