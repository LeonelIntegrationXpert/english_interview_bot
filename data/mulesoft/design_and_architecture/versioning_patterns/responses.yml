version: '3.1'
responses:
  utter_versioning_patterns:
    - custom:
        vr_pt: |
          Padrões de versionamento incluem versionamento semântico usando versão major ponto minor ponto patch. Versionamento por URI utiliza barra v um antes do nome do recurso. Versionamento por cabeçalho define o cabeçalho Accept-Version dois pontos um. Versionamento por tipo de mídia define application barra vnd ponto myapi ponto v um mais json. Versionamento por parâmetro de consulta utiliza interrogação version igual um. Cada abordagem tem impactos distintos em cache, descoberta e compatibilidade.
        vr_en: |
          Versioning patterns include semantic versioning using major dot minor dot patch. URI versioning uses slash v one before the resource name. Header versioning sets Accept-Version colon one. Media type versioning uses application slash vnd dot myapi dot v one plus json. Query parameter versioning uses question mark version equals one. Each approach has distinct impacts on caching, discoverability and backward compatibility.
    - custom:
        vr_pt: |
          Padrões de versionamento incluem incrementar major, minor e patch em sequência semântica. URI versioning antepõe v dois ao caminho do recurso. Header versioning usa Accept-Version dois pontos dois. Media type versioning define application barra vnd ponto myapi ponto v dois mais json. Query parameter versioning usa interrogação version igual dois. Cada padrão altera o comportamento de cache e evolução da API.
        vr_en: |
          Versioning patterns include bumping major, minor and patch in semantic order. URI versioning prepends v two to the resource path. Header versioning uses Accept-Version colon two. Media type versioning defines application slash vnd dot myapi dot v two plus json. Query parameter versioning uses question mark version equals two. Each pattern affects API caching and evolution differently.
    - custom:
        vr_pt: |
          Versionamento semântico segue formato X ponto Y ponto Z. Versionamento por URI insere barra v três antes do recurso. Versionamento por header usa Accept-Version três. Versionamento por media type define application barra vnd ponto myapi ponto v três mais json. Versionamento por querystring usa interrogação version igual três. Essas opções impactam roteamento e compatibilidade.
        vr_en: |
          Semantic versioning follows X dot Y dot Z format. URI versioning inserts slash v three before the resource. Header versioning uses Accept-Version three. Media type versioning defines application slash vnd dot myapi dot v three plus json. Query string versioning uses question mark version equals three. These choices impact routing and compatibility.
    - custom:
        vr_pt: |
          Padrão semântico usa major ponto minor ponto patch. URI versioning adiciona v quatro no caminho. Header versioning define Accept-Version quatro. Media type versioning configura application slash vnd point myapi point v four plus json. Query parameter versioning utiliza ?version=4. Cada método impacta caches e proxies de forma única.
        vr_en: |
          Semantic pattern uses major dot minor dot patch. URI versioning adds v four in the path. Header versioning sets Accept-Version four. Media type versioning configures application slash vnd dot myapi dot v four plus json. Query parameter versioning uses question mark version equals four. Each method impacts caches and proxies uniquely.
    - custom:
        vr_pt: |
          SemVer utiliza formato major ponto minor ponto patch. URI versioning insere barra v cinco antes dos recursos de API. Header versioning aplica Accept-Version cinco. Media type versioning define application barra vnd ponto myapi ponto v cinco mais json. Query parameter versioning adiciona interrogação version igual cinco. Diferentes padrões influenciam ferramentas de descoberta.
        vr_en: |
          SemVer uses major dot minor dot patch format. URI versioning inserts slash v five before API resources. Header versioning applies Accept-Version five. Media type versioning defines application slash vnd dot myapi dot v five plus json. Query parameter versioning adds question mark version equals five. Different patterns influence discovery tools.
    - custom:
        vr_pt: |
          Versionamento semântico incrementa major, minor e patch por extenso. URI versioning insere v seis no URL. Header versioning define Accept-Version seis. Media type versioning configura application slash vnd dot myapi dot v six plus json. Query parameter versioning usa ?version=6. Cada técnica traz efeitos em cache de CDNs.
        vr_en: |
          Semantic versioning increments major, minor and patch in full. URI versioning inserts v six in the URL. Header versioning sets Accept-Version six. Media type versioning configures application slash vnd dot myapi dot v six plus json. Query parameter versioning uses question mark version equals six. Each technique brings effects on CDN caching.
    - custom:
        vr_pt: |
          SemVer segue X ponto Y ponto Z. URI versioning antepõe v sete no path. Header versioning define Accept-Version sete. Media type versioning usa application slash vnd dot myapi dot v seven plus json. Query parameter versioning usa ?version=7. Essas escolhas impactam rotas e consumo.
        vr_en: |
          SemVer follows X dot Y dot Z. URI versioning prepends v seven to the path. Header versioning sets Accept-Version seven. Media type versioning uses application slash vnd dot myapi dot v seven plus json. Query parameter versioning uses question mark version equals seven. These choices impact routing and consumption.
    - custom:
        vr_pt: |
          Versionamento semântico adota major.minor.patch. URI versioning insere /v oito. Header versioning usa Accept-Version oito. Media type versioning define application slash vnd dot myapi dot v eight plus json. Query parameter versioning aplica interrogação version igual oito. Cada opção modifica políticas de cache.
        vr_en: |
          Semantic versioning uses major dot minor dot patch. URI versioning inserts slash v eight. Header versioning uses Accept-Version eight. Media type versioning defines application slash vnd dot myapi dot v eight plus json. Query parameter versioning applies question mark version equals eight. Each option modifies caching policies.
    - custom:
        vr_pt: |
          SemVer segue formato X ponto Y ponto Z. URI versioning antepõe /v nove. Header versioning define Accept-Version nove. Media type versioning usa application slash vnd dot myapi dot v nine plus json. Query parameter versioning usa ?version=9. Escolhas diferem em descobribilidade e compatibilidade.
        vr_en: |
          SemVer follows X dot Y dot Z format. URI versioning prepends slash v nine. Header versioning sets Accept-Version nine. Media type versioning uses application slash vnd dot myapi dot v nine plus json. Query parameter versioning uses question mark version equals nine. Choices differ in discoverability and compatibility.
    - custom:
        vr_pt: |
          Versionamento semântico utiliza major ponto minor ponto patch. URI versioning insere /v dez. Header versioning define Accept-Version dez. Media type versioning configura application slash vnd dot myapi dot v ten plus json. Query parameter versioning adiciona interrogação version igual dez. Cada padrão afeta ciclos de vida de APIs.
        vr_en: |
          Semantic versioning uses major dot minor dot patch. URI versioning inserts slash v ten. Header versioning sets Accept-Version ten. Media type versioning configures application slash vnd dot myapi dot v ten plus json. Query parameter versioning adds question mark version equals ten. Each pattern affects API lifecycle management.
