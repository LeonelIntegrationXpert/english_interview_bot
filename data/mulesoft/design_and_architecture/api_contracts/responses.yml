version: '3.1'
responses:
  utter_api_contracts:
    - custom:
        vr_pt: |
          Os contratos de API em RAML ou em OpenAPI formalizam de maneira completa todos os aspectos de uma interface de programação de aplicações. Eles descrevem cada recurso disponível, os métodos de comunicação suportados (por exemplo, obter dados, criar registros, atualizar informações e excluir itens), os parâmetros de entrada esperados em cada chamada (como nomes de campos e tipos de dados), os detalhes dos cabeçalhos de requisição e resposta, os formatos de payload aceitos e devolvidos, e todos os códigos de status HTTP que podem ser retornados, incluindo exemplos de mensagens de erro. Esses contratos servem como a única fonte de verdade para desenvolvedores e consumidores de API, pois definem de forma inequívoca como usar cada serviço. A partir desse artefato único é possível gerar automaticamente documentação interativa que facilita a compreensão, criar mocks para testar integrações antes de a implementação estar pronta, validar em tempo de execução se as requisições e respostas seguem o modelo definido, e automatizar testes de contrato para garantir que novas versões não quebrem o comportamento esperado. Além disso, ao versionar o contrato de maneira clara, por exemplo mantendo arquivos separados ou usando marcações de versão em cada definição, assegura-se compatibilidade entre diferentes versões e permite aplicar políticas de governança, como aprovação de mudanças e auditoria de uso, durante todo o ciclo de vida da API.
        vr_en: |
          API contracts defined in RAML or in OpenAPI fully formalize every aspect of an application programming interface. They describe each available resource, the supported methods of communication (for example retrieving data creating records updating information and deleting items), the expected input parameters for each call (such as field names and data types), the details of request and response headers, the accepted and returned payload formats and all possible HTTP status codes including examples of error messages. These contracts serve as the single source of truth for both developers and API consumers because they unambiguously define how to use each service. From this single artifact it is possible to automatically generate interactive documentation that simplifies understanding create mocks to test integrations before implementation is complete validate at runtime that requests and responses conform to the defined model and automate contract tests to ensure that new versions do not break expected behavior. Furthermore by clearly versioning the contract—for example by using separate files or version annotations within each definition—you ensure compatibility across different versions and enable governance policies such as change approvals and usage audits throughout the entire API lifecycle.
    - custom:
        vr_pt: |
          Um contrato de API escrito em RAML ou em OpenAPI documenta de forma completa cada ponto de extremidade disponível, indicando quais recursos podem ser consultados ou modificados e em quais caminhos da aplicação. Ele descreve os verbos de transferência de estado no protocolo HTTP, como obter informações com o verbo “get”, criar novos registros com o verbo “post”, alterar dados existentes com o verbo “put” ou remover itens com o verbo “delete”. Além disso, define os esquemas de dados, detalhando cada campo esperado em requisições e respostas, informando tipos de dados como texto, número, data e objetos complexos. O contrato também explica todos os códigos de resposta que a API pode retornar, desde o código que sinaliza sucesso até os códigos que representam erros de validação ou indisponibilidade, incluindo exemplos de mensagens de erro para orientar o tratamento correto pela aplicação cliente. Esse artefato serve como guia único e confiável para desenvolvedores que vão implementar a API e para consumidores que vão integrá-la aos seus sistemas. Ferramentas especializadas leem o contrato para gerar automaticamente documentação interativa, onde é possível testar chamadas em sandbox; gerar kits de desenvolvimento de software em diversas linguagens de programação; executar validações em tempo de compilação ou de execução para garantir que as requisições respeitem os esquemas definidos; e monitorar continuamente a conformidade da API, verificando se novas versões mantêm compatibilidade com clientes existentes. Dessa forma, o contrato torna todo o ciclo de vida da API mais seguro, previsível e organizado.
        vr_en: |
          An API contract written in RAML or OpenAPI fully documents every available endpoint by specifying which resources can be queried or modified and the exact URL paths to access them. It describes the state transfer verbs of the HTTP protocol, such as retrieving information with the “get” verb, creating new records with the “post” verb, updating existing data with the “put” verb, and deleting items with the “delete” verb. In addition, it defines data schemas by detailing each field expected in requests and responses, indicating data types such as string, number, date and complex objects. The contract also explains all possible response codes the API may return, from codes indicating success to those representing validation errors or service unavailability, including sample error messages to guide proper handling by the client application. This artifact serves as the single reliable source of truth for both developers who implement the API and consumers who integrate it into their systems. Specialized tools read the contract to automatically generate interactive documentation that allows testing calls in a sandbox environment; create software development kits in multiple programming languages; perform compile-time or runtime validations to ensure requests conform to the defined schemas; and continuously monitor API compliance, checking that new versions remain compatible with existing clients. In this way, the contract makes the entire API lifecycle more secure, predictable and well organized.
    - custom:
        vr_pt: |
          Os contratos de API escritos em RAML ou em OpenAPI descrevem de forma clara e organizada todos os aspectos de uso de um serviço. Eles documentam cada recurso disponível, indicando o caminho completo para acessá-lo e quais parâmetros de entrada são exigidos, como nomes de campos, tipos de dados e formatos esperados. Também especificam os parâmetros de saída, detalhando as estruturas de resposta, os campos retornados e os valores possíveis. Além disso, esses contratos definem os modelos de dados usados pela API, agrupando em um único lugar as definições de objetos, listas e tipos complexos, o que facilita a compreensão de como as informações circulam entre os sistemas. Eles ainda descrevem cenários de erro, indicando todos os códigos de status HTTP que podem ser devolvidos em caso de falhas, acompanhados de exemplos de mensagens de erro para orientar o tratamento adequado pelo cliente. Todo esse conjunto de definições fica centralizado em um único arquivo que serve como fonte de verdade para toda a equipe. A partir dele é possível gerar automaticamente documentação interativa, onde é possível testar chamadas de API em um ambiente controlado, e configurar validações em tempo de execução para garantir que as requisições e as respostas obedeçam exatamente às regras e aos formatos definidos no contrato.
        vr_en: |
          API contracts written in RAML or in OpenAPI clearly and systematically describe every aspect of a service’s usage. They document each available resource, indicating the full path to access it and specifying required input parameters such as field names data types and expected formats. They also define output parameters by detailing response structures returned fields and possible values. Furthermore these contracts define the data models used by the API by consolidating object list and complex type definitions in one place making it easier to understand how information flows between systems. They also document error scenarios by listing all HTTP status codes that may be returned on failure along with sample error messages to guide proper client handling. All of these definitions are centralized in a single file that acts as the single source of truth for the entire team. From this artifact teams can automatically generate interactive documentation that allows testing API calls in a controlled sandbox environment and implement runtime validation to ensure that requests and responses strictly adhere to the rules and formats defined in the contract.
    - custom:
        vr_pt: |
          Ao definir contratos de API em RAML ou em OpenAPI você descreve formalmente cada recurso que a API oferece, especificando o caminho de acesso, os métodos de comunicação suportados, como obter informações com o método obter, criar registros com o método criar, atualizar dados com o método atualizar e excluir itens com o método remover. Você também define os esquemas de payload, detalhando cada campo exigido em requisições e em respostas, informando se é texto, número, data ou objeto complexo e incluindo exemplos de valores. Com esse contrato completo e legível, ferramentas automáticas podem gerar documentação interativa que ajuda desenvolvedores e consumidores a entenderem como usar a API, exibindo exemplos de chamadas e de respostas em tempo real. Essas mesmas ferramentas conseguem validar em tempo de execução se uma requisição segue exatamente o modelo definido, garantindo que o formato do pedido e da resposta esteja sempre correto. Além disso, é possível simular o comportamento da API antes de escrever qualquer linha de código, criando versões mock que respondem conforme o contrato, o que acelera o desenvolvimento e reduz erros de integração.
        vr_en: |
          By defining API contracts in RAML or OpenAPI you formally describe every resource the API provides by specifying its access path and the supported communication methods such as retrieve create update and delete. You also define payload schemas by detailing each field required in requests and responses indicating whether it is string number date or complex object and including sample values. With this complete human readable contract automated tools can generate interactive documentation that helps developers and consumers understand how to use the API by showing live examples of calls and responses. Those same tools can perform runtime validation to ensure that a request strictly follows the defined model guaranteeing that both request and response formats are always correct. Additionally you can mock the API behavior before writing any code by creating simulated endpoints that respond according to the contract which speeds up development and reduces integration errors.
    - custom:
        vr_pt: |
          Os contratos de API escritos em RAML ou em OpenAPI padronizam de forma completa a descrição de todos os pontos de extremidade disponíveis, detalhando os caminhos de acesso, os parâmetros necessários em cada chamada, os cabeçalhos de requisição e resposta e a estrutura completa do corpo de mensagem. Eles servem como um guia único e consolidado para todas as equipes envolvidas no projeto, garantindo que desenvolvedores de front­end e back­end falem a mesma língua. A partir desse contrato central, é possível automatizar testes de contrato que verificam se a API implementada segue rigorosamente o que foi especificado, gerar ambientes simulados de API em modo mock para desenvolvimento e testes sem depender do serviço real, e assegurar que qualquer alteração no contrato seja registrada como uma nova versão, mantendo compatibilidade com consumidores antigos e facilitando o controle de mudanças ao longo do tempo.
        vr_en: |
          API contracts defined in RAML or in OpenAPI fully standardize the description of every available endpoint by detailing access paths the required parameters for each call request and response headers and the complete message body structure. They serve as a single consolidated guide for all teams involved in the project, ensuring that front end and back end developers all speak the same language. From this central contract it is possible to automate contract tests that verify the implemented API strictly follows the specified design generate mock API environments for development and testing without relying on the real service and ensure that any change to the contract is recorded as a new version maintaining compatibility with existing consumers and facilitating change management over time.
    - custom:
        vr_pt: |
          Um contrato de API escrito em RAML ou em OpenAPI detalha de forma completa cada rota disponível, informando o caminho de acesso para cada recurso e o método de comunicação HTTP correspondente, como obter informações, criar novos registros, alterar dados existentes ou remover itens. O contrato descreve todos os tipos de dados esperados em cada campo de entrada e de saída, especificando se são textos, números, datas ou estruturas mais complexas, e inclui exemplos de payload com valores reais para facilitar o entendimento. Ele também lista todos os códigos de erro que a API pode retornar, explicando o significado de cada código e apresentando mensagens de falha modelo para que os consumidores saibam como tratar situações inesperadas. Esse artefato assume o papel de acordo formal entre quem desenvolve a API e quem a consome, servindo como referência única para toda a equipe. Graças a esse contrato, é possível aplicar políticas de governança que definem quem pode alterar cada parte da API, manter um controle rigoroso de versões para garantir compatibilidade entre diferentes liberações e integrar a verificação automática do contrato em pipelines de integração contínua e de entrega contínua. Dessa forma, cada mudança no serviço é validada automaticamente, documentada e implantada de maneira segura e previsível, reduzindo riscos e acelerando o ciclo de entrega de novas funcionalidades.
        vr_en: |
          An API contract written in RAML or OpenAPI provides a complete description of every available route by specifying the access path for each resource and the corresponding HTTP method, such as retrieving information, creating new records, updating existing data or deleting items. The contract details every data type expected in each input and output field, indicating whether they are text numbers dates or more complex structures, and includes real world payload examples to aid comprehension. It also enumerates all error codes the API may return, explaining the meaning of each code and offering sample error messages so consumers know how to handle unexpected situations. This artifact serves as a formal agreement between the API producer and the API consumer, acting as the single source of truth for the entire team. With this contract in place you can enforce governance policies that control who may change each part of the API maintain strict versioning to ensure compatibility across releases and integrate automatic contract validation into continuous integration and continuous delivery pipelines. In this way every service change is automatically validated documented and deployed in a safe predictable manner reducing risks and accelerating the delivery of new features.
    - custom:
        vr_pt: |
          As definições de API em RAML ou em OpenAPI descrevem de forma completa cada recurso disponível, indicando o caminho de acesso e todos os parâmetros esperados, sejam eles obrigatórios ou opcionais. Para cada parâmetro, o contrato informa o nome do campo, o tipo de dado aceito, como texto ou número, e exemplos de valores para facilitar a compreensão. As definições também detalham os esquemas de resposta, mostrando a estrutura completa do corpo retornado pela API, incluindo objetos aninhados, listas e descrições de cada propriedade. Além disso, esses contratos especificam todos os códigos de status do Protocolo HTTP que podem ser devolvidos em cada operação, como o código dois cento e quatro que sinaliza sucesso sem conteúdo ou o código quatro cento e quatro que indica recurso não encontrado, apresentando exemplos de mensagens de erro padronizadas. Com essas informações centralizadas, ferramentas automáticas conseguem gerar documentação interativa que permite aos desenvolvedores testar chamadas diretamente no navegador, validar automaticamente os payloads de requisição e resposta em tempo de execução, e executar testes de compatibilidade entre diferentes versões da API para garantir que novas alterações não causem regressões nos consumidores existentes.
        vr_en: |
          API definitions in RAML or OpenAPI provide a complete description of every available resource by specifying the access path and all expected parameters, whether required or optional. For each parameter the contract states the field name the accepted data type such as string or number and offers example values to aid understanding. The definitions also detail the response schemas by showing the full structure of the response body including nested objects lists and descriptions of each property. In addition these contracts enumerate all the HTTP status codes that each operation may return, such as code two hundred and four to indicate success with no content or code four hundred and four to indicate resource not found along with standardized error message examples. With this centralized information automated tools can generate interactive documentation that allows developers to test calls directly in the browser automatically validate request and response payloads at runtime and perform compatibility testing across different API versions to ensure that new changes do not introduce regressions for existing consumers.
    - custom:
        vr_pt: |
          As definições de contrato de API em RAML ou em OpenAPI geram um documento claro e legível que descreve cada recurso disponível, os métodos de acesso baseados no Protocolo de Transferência de Hipertexto como obter, criar, atualizar e excluir, exemplos de requisições e de respostas que mostram exatamente o formato esperado, e as políticas de segurança que incluem autenticação por token e criptografia de dados. Esse documento funciona como uma única fonte de verdade para toda a equipe, permitindo gerar documentação interativa que pode ser testada no navegador, validar automaticamente o conteúdo das requisições e das respostas durante o desenvolvimento, e simular o comportamento da API em ambientes de teste antes de escrever código. Ao padronizar essas definições, garante-se que clientes e servidores compartilhem a mesma compreensão de como a interface funciona, reduzindo retrabalho, evitando falhas de integração e acelerando o ciclo de entrega de novas funcionalidades.
        vr_en: |
          By defining API contracts in RAML or OpenAPI you create a clear and human readable document that describes every available resource, the supported methods based on the Hypertext Transfer Protocol such as retrieve, create, update and delete, sample requests and responses that demonstrate the exact expected format, and security policies that include token based authentication and data encryption. This document acts as the single source of truth for the entire team, enabling generation of interactive documentation that can be tested in the browser, automatic validation of request and response content during development, and simulation of API behavior in test environments before writing any code. By standardizing these definitions you ensure that clients and servers share the same understanding of how the interface works, reduce rework, prevent integration failures and speed up the delivery cycle for new features.
    - custom:
        vr_pt: |
          Definir contratos de API usando RAML ou OpenAPI significa reunir em um único arquivo todas as definições que descrevem exatamente o que a API oferece e como ela deve ser utilizada. Nesse arquivo você documenta cada recurso disponível e especifica os caminhos de acesso, detalha os métodos do protocolo de transferência de hipertexto como obter criar atualizar e excluir, descreve os esquemas de dados em JavaScript Object Notation ou Extensible Markup Language usados em cada requisição e em cada resposta, e lista todos os códigos de erro possíveis juntamente com exemplos de mensagens padronizadas. Esse arquivo único serve como fonte confiável para toda a equipe de desenvolvimento e para consumidores da API. A partir dele é possível gerar automaticamente documentação interativa que pode ser testada em ambientes de simulação antes de escrever código, criar ambientes mock para acelerar o desenvolvimento de integrações, produzir kits de desenvolvimento de software em várias linguagens de programação e executar testes de regressão da API para garantir que alterações futuras não quebrem funcionalidades existentes.
        vr_en: |
          Defining API contracts using RAML or OpenAPI means gathering into a single file all the definitions that precisely describe what the API provides and how it should be used. In this file you document every available resource and specify the access paths, detail the hypertext transfer protocol operations such as retrieve create update and delete, describe the data schemas in JavaScript Object Notation or Extensible Markup Language for each request and each response, and list all possible error codes along with standardized example messages. This single artifact acts as a reliable source for the entire development team and for API consumers. From it you can automatically generate interactive documentation that can be tested in sandbox environments before writing any code, create mock environments to accelerate integration development, produce software development kits in various programming languages, and run regression tests on the API to ensure that future changes do not break existing functionality.
    - custom:
        vr_pt: |
          Os contratos de API escritos em RAML ou em OpenAPI formalizam de forma completa o acordo entre sistemas que se integram. Eles especificam cada rota disponível, ou seja, o caminho pelo qual o cliente acessa o serviço, descrevem detalhadamente todos os parâmetros aceitos em cada chamada, incluindo nomes de campos e tipos de dados, e explicam quais tipos de retorno podem ser esperados, como objetos complexos com várias propriedades ou listas de elementos. Além disso, incluem exemplos de requisições e de respostas tanto de sucesso quanto de erro, mostrando exatamente quais mensagens de falha são retornadas em situações como recurso não encontrado ou dados inválidos. Esses contratos apoiam a governança de APIs ao fornecer um artefato centralizado que documenta todas as regras de uso, garantindo controle de versão rigoroso para que qualquer mudança seja registrada e gerenciada de forma organizada. Com o contrato em mãos, é possível gerar automaticamente documentação interativa para desenvolvedores, validar continuamente as chamadas em pipelines de integração contínua e entrega contínua, e automatizar testes que asseguram que novas versões não quebrem funcionalidades existentes.
        vr_en: |
          API contracts written in RAML or in OpenAPI fully formalize the agreement between systems that integrate. They specify each available route, meaning the path through which clients access the service, detail all parameters accepted in each call, including field names and data types, and explain which types of responses can be expected, such as complex objects with multiple properties or lists of items. In addition, they include examples of both successful and error requests and responses, showing exactly which failure messages are returned in situations such as resource not found or invalid input data. These contracts support API governance by providing a centralized artifact that documents all usage rules, ensuring strict version control so that any change is recorded and managed in an organized way. With the contract in place, teams can automatically generate interactive documentation for developers, continuously validate calls in continuous integration and continuous delivery pipelines, and automate tests that ensure new versions do not break existing functionality.
