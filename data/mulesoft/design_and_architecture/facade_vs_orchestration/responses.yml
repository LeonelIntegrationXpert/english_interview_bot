version: '3.1'
responses:
  utter_facade_vs_orchestration:
    - custom:
        vr_pt: |
          A fachada é uma camada de abstração que apresenta uma única interface simplificada para diversos serviços internos. Ela age como uma porta de entrada única, ocultando a complexidade dos processos que ocorrem por trás dos panos. Por meio de uma fachada, o cliente ou outro sistema faz apenas uma chamada, e a fachada se encarrega de invocar cada serviço necessário, consolidar as respostas e retornar um resultado unificado. Esse padrão facilita muito o uso das funcionalidades, pois o consumidor não precisa conhecer como cada serviço funciona nem em que ordem as chamadas devem ser realizadas. Já a orquestração refere-se ao controle centralizado dos fluxos de trabalho e das regras de negócio que envolvem vários serviços diferentes. Nessa abordagem, existe um componente que coordena a execução sequencial ou paralela de cada etapa do processo, garantindo que cada regra seja aplicada no momento certo. Por exemplo, em um fluxo de pagamento, a orquestração pode chamar primeiro o serviço de validação do cartão, depois o serviço de autorização bancária, em seguida o serviço de registro da transação e, por fim, notificar o usuário. A orquestração assegura também o tratamento de erros, permitindo retentativas e alternativas de contingência caso algum serviço falhe. Em resumo, a fachada simplifica o consumo ao unificar múltiplas operações em um único ponto de acesso, enquanto a orquestração coordena a lógica de negócio e a sequência de chamadas entre serviços para cumprir processos complexos.
        vr_en: |
          The facade is an abstraction layer that provides a single simplified interface to multiple internal services. It acts as a single entry point, hiding the complexity of all the processes happening behind the scenes. Through a facade, the client or another system makes just one call, and the facade takes care of invoking each required service, consolidating the responses and returning a unified result. This pattern greatly simplifies functionality consumption, as the consumer does not need to know how each service works or in which order the calls must be executed. Orchestration, on the other hand, refers to the centralized control of workflows and business rules involving multiple different services. In this approach there is a component that coordinates the sequential or parallel execution of each step in the process, ensuring that each rule is applied at the right time. For example in a payment flow, orchestration might call the card validation service first, then the bank authorization service, next the transaction record service and finally notify the user. Orchestration also manages error handling by enabling retries and fallback options if a service fails. In summary, a facade simplifies consumption by unifying multiple operations into a single access point, whereas orchestration coordinates business logic and the sequence of service calls to fulfill complex processes.
    - custom:
        vr_pt: |
          A fachada oferece um ponto de entrada único para várias APIs, apresentando uma interface amigável que oculta toda a complexidade e diversidade dos serviços internos. Em vez de o cliente precisar fazer diversas chamadas distintas e interpretar diferentes formatos de resposta, ele envia apenas uma solicitação para a fachada, que por sua vez invoca internamente cada serviço necessário, agrega os resultados e devolve uma única resposta consolidada. Isso diminui o número de chamadas que o cliente precisa gerenciar e reduz as possibilidades de erro no consumo dos serviços. Por outro lado, a orquestração assume a responsabilidade de coordenar o fluxo completo de operações entre os serviços necessários para atender a um processo de negócio. Ela controla a sequência em que cada passo é executado, aplica regras de negócio complexas, trata as exceções que podem ocorrer em cada etapa e mantém o estado das atividades durante toda a execução. Se um serviço falhar, a orquestração pode acionar tentativas automáticas de repetição, executar caminhos alternativos e garantir que o processo termine de forma consistente. Em suma, a fachada tem como objetivo tornar o acesso aos serviços mais simples e amigável ao consumidor, enquanto a orquestração foca em coordenar e governar toda a lógica de negócio e a sequência de chamadas entre serviços para entregar um fluxo completo e resiliente.
        vr_en: |
          The facade provides a single entry point for multiple APIs by offering a user friendly interface that hides all the complexity and variety of internal services. Instead of the client needing to make multiple separate calls and interpret different response formats it sends just one request to the facade which then internally invokes each required service aggregates the results and returns a single consolidated response. This reduces the number of calls the client must manage and lowers the chances of errors when consuming services. Orchestration on the other hand is responsible for coordinating the entire workflow of operations among the services required to fulfill a business process. It controls the order in which each step is executed enforces complex business rules handles any exceptions that may occur at each stage and maintains the state of activities throughout the execution. If a service fails orchestration can trigger automatic retry attempts execute alternative paths and ensure that the process completes consistently. In summary the facade aims to simplify and streamline service access for the consumer whereas orchestration focuses on coordinating and governing all business logic and the sequence of service calls to deliver a complete and resilient workflow.
    - custom:
        vr_pt: |
          A fachada oferece uma interface única e amigável que unifica vários microserviços em um só ponto de acesso, ocultando completamente os detalhes de implementação de cada serviço individual. Com isso o cliente ou outra aplicação faz apenas uma chamada e a fachada se encarrega de invocar internamente cada microserviço necessário, consolidar as respostas e devolver um resultado unificado. Essa camada de abstração garante que alterações internas nos microserviços não impactem quem consome a API pois a interface da fachada permanece estável e consistente ao longo do tempo. Em contrapartida, a orquestração coordena de forma centralizada todo o processo de negócio que envolve múltiplas etapas e serviços diferentes. Ela determina a ordem correta de execução de cada passo aplicando regras específicas de negócio, gerencia o estado de cada transação, trata exceções e realiza tentativas de repetição automáticas quando necessário. Por exemplo no processamento de um pedido a orquestração pode chamar primeiro o serviço de validação de estoque depois o serviço de cálculo de frete em seguida o serviço de pagamento e por fim o serviço de notificação ao cliente. Ao final ela agrega os resultados dessas etapas e garante que o processo seja concluído com sucesso ou role back de forma segura em caso de falha. Resumindo a fachada simplifica o acesso ao esconder complexidade e fornecer um ponto único de entrada enquanto a orquestração assegura que cada serviço participe da sequência correta de operações para entregar um fluxo de negócio completo resiliente e confiável.
        vr_en: |
          The facade provides a single user friendly interface that unifies multiple microservices into one access point, completely hiding the implementation details of each individual service. As a result the client or another application makes only one call and the facade internally invokes each required microservice consolidates the responses and returns a unified result. This abstraction layer ensures that internal changes in microservices do not affect API consumers because the facade interface remains stable and consistent over time. In contrast orchestration centrally coordinates the entire business process that involves multiple steps and different services. It determines the correct execution order of each step by applying specific business rules manages the state of each transaction handles exceptions and performs automatic retry attempts when necessary. For example in order processing orchestration might call the inventory validation service first then the shipping cost calculation service next the payment service and finally the customer notification service. At the end it aggregates the results of these steps and ensures that the process either completes successfully or rolls back safely in case of failure. In summary the facade simplifies access by hiding complexity and providing a single entry point while orchestration ensures that each service participates in the correct sequence of operations to deliver a complete resilient and reliable business workflow.
    - custom:
        vr_pt: |
          A fachada unifica diferentes APIs em um único contrato para o consumidor, oferecendo uma interface única e consistente que simplifica o processo de integração. Em vez de chamar cada serviço individualmente e entender vários modelos de dados, o cliente faz apenas uma solicitação para a fachada, que se encarrega de invocar os serviços internos necessários e consolidar as respostas. Isso protege o cliente de alterações internas nos serviços, pois a interface exposta pela fachada permanece estável mesmo que os serviços mudem ou sejam substituídos. Por sua vez, a orquestração assume a responsabilidade de coordenar todo o fluxo de dados e de regras de negócio entre essas APIs de forma centralizada. Ela gerencia dependências garantindo que serviços dependentes sejam chamados na ordem correta, sincroniza chamadas paralelas quando necessário e aplica políticas de tratamento de erros e de compensação em caso de falhas. Ao final do processo, a orquestração reúne todos os resultados parciais, valida a integridade dos dados e devolve ao consumidor um resultado completo e confiável, garantindo que todo o processo de negócio seja executado corretamente do início ao fim.
        vr_en: |
          The facade consolidates multiple distinct APIs into a single contract for the consumer, providing one consistent interface that simplifies integration. Instead of calling each service individually and understanding various data models, the client makes just one request to the facade, which then invokes the internal services as needed and aggregates their responses. This shields the client from internal service changes, since the facade’s exposed interface remains stable even if underlying services are modified or replaced. Orchestration, on the other hand, is responsible for coordinating the entire data flow and business rules among these APIs in a centralized manner. It manages dependencies by ensuring that dependent services are called in the correct order, synchronizes parallel calls when necessary, and applies error handling and compensation policies in case of failures. At the end of the process, orchestration collects all partial results, validates data integrity, and returns a complete and reliable outcome to the consumer, ensuring that the entire business process is executed correctly from start to finish.
    - custom:
        vr_pt: |
          A fachada oferece uma interface única, simples e amigável por trás da qual vários serviços internos operam de forma coordenada. Em vez de o cliente precisar entender e chamar cada serviço individualmente, ele envia apenas uma solicitação à fachada, que se encarrega de invocar cada serviço necessário, combinar os resultados e devolver uma resposta consolidada. Isso reduz a quantidade de informações que o cliente precisa gerenciar e oculta toda a complexidade da arquitetura interna, mantendo a interface estável mesmo quando os serviços internos mudam. Por outro lado, a orquestração assume a responsabilidade de coordenar cada etapa do processo de negócio que envolve múltiplos serviços. Ela define a sequência exata em que as chamadas devem ocorrer, aplica todas as regras de negócio exigidas, trata automaticamente possíveis erros por meio de tentativas de repetição e executa ações compensatórias quando necessário para manter a integridade dos dados. A orquestração garante que processos complexos que demandam passos sequenciais ou fluxos de reversão sejam executados de forma consistente e confiável, finalizando o fluxo com um resultado completo e correto para o cliente.
        vr_en: |
          The facade provides a single, simple and user friendly interface behind which several internal services operate in a coordinated manner. Instead of the client needing to understand and call each service individually it sends just one request to the facade which then invokes every required service aggregates the results and returns a consolidated response. This reduces the amount of information the client must manage and hides all internal architectural complexity while keeping the interface stable even when internal services change. Orchestration on the other hand takes responsibility for coordinating every step of the business process that involves multiple services. It defines the exact sequence in which calls must occur enforces all required business rules automatically handles potential errors through retry attempts and performs compensating actions when needed to maintain data integrity. Orchestration ensures that complex processes requiring sequential steps or rollback flows are executed consistently and reliably concluding with a complete and correct outcome for the client.
    - custom:
        vr_pt: |
          A fachada funciona como um ponto de acesso único que agrupa diversos serviços em uma única interface simplificada. Quando o cliente precisa executar uma funcionalidade complexa, ele faz apenas uma chamada à fachada, sem ter que conhecer o nome, o caminho ou a forma de autenticação de cada serviço interno. A fachada abstrai toda a complexidade da arquitetura, unifica formatos de dados e consolida as respostas em um resultado claro e consistente. Por sua vez, a orquestração é responsável por gerenciar o encadeamento das operações entre esses mesmos serviços. Primeiro ela determina a ordem exata em que cada serviço deve ser chamado, depois aplica as regras de negócio necessárias em cada etapa e, se algum serviço falhar, executa tentativas automáticas de repetição ou dispara rotas de contingência para manter o fluxo em funcionamento. A orquestração também monitora o andamento de cada transação, gera métricas detalhadas sobre progresso e desempenho, e garante que todo o processo de negócio seja concluído de forma íntegra e resiliente, mesmo diante de falhas parciais.
        vr_en: |
          The facade acts as a single access point that brings together multiple services into one simplified interface. When a client needs to perform a complex operation, it makes just one call to the facade without having to know the name the path or the authentication details of each internal service. The facade hides all architectural complexity, unifies data formats and consolidates responses into a clear consistent outcome. Orchestration on the other hand is responsible for managing the chaining of operations among those same services. First it determines the exact order in which each service must be called then it applies the necessary business rules at each step and if any service fails it triggers automatic retry attempts or fallback routes to keep the flow running. Orchestration also monitors the progress of each transaction generates detailed metrics on progress and performance and ensures that the entire business process completes with integrity and resilience even in the face of partial failures.
    - custom:
        vr_pt: |
          A fachada funciona como uma camada que agrupa diversos serviços em uma única interface uniforme, escondendo todos os detalhes de como cada serviço interno foi implementado. Dessa forma o cliente ou outro sistema faz apenas uma chamada simplificada à fachada e não precisa saber quantos serviços existem por trás, quais são seus nomes ou como acessá­los. Isso facilita o uso e reduz o risco de erros, pois a fachada mantém sempre o mesmo formato de entrada e de saída, mesmo quando os serviços internos mudam. Já a orquestração assume o papel de maestro do processo de negócio, coordenando a execução passo a passo das tarefas distribuídas entre vários serviços. Ela determina a sequência correta de chamadas, aplica cada regra de negócio no momento adequado e trata falhas automaticamente por meio de tentativas de repetição ou rotas alternativas de contingência. Com isso o resultado final sempre permanece coerente e o processo de negócio continua funcionando de forma confiável, mesmo que algum serviço interno apresente problemas temporários.
        vr_en: |
          The facade acts as a layer that groups multiple services under a single uniform interface, hiding all details of how each internal service is implemented. This way the client or another system makes just one simplified call to the facade and does not need to know how many services are behind it what their names are or how to access them. This simplifies usage and reduces the chance of errors because the facade always maintains the same input and output format even when internal services change. Orchestration on the other hand takes on the role of conductor for the business process by coordinating the step by step execution of distributed tasks across multiple services. It determines the correct sequence of calls applies each business rule at the appropriate time and handles failures automatically through retry attempts or fallback pathways. As a result the final outcome always remains consistent and the business process continues to operate reliably even if an internal service experiences a temporary problem.
    - custom:
        vr_pt: |
          A fachada funciona como uma camada de abstração que unifica diversos serviços de back-end em um único ponto de acesso para o cliente. Em vez de o usuário precisar conhecer diferentes endereços e formatos de cada serviço, ele faz apenas uma chamada à fachada, que por sua vez invoca todos os serviços necessários, consolida as respostas e devolve um resultado integrado e coerente. Dessa forma o cliente interage com uma interface uniforme e simples, enquanto a estrutura interna de múltiplos serviços permanece oculta e independente de mudanças internas. Já a orquestração é responsável por coordenar o fluxo completo de operações entre esses serviços unificados pela fachada. Ela determina a ordem exata em que cada serviço deve ser chamado, aplica todas as regras de negócio que regem cada etapa do processo e gerencia falhas por meio de retentativas automáticas ou caminhos alternativos de contingência. A orquestração também coleta métricas de execução, monitora o status das transações e assegura que o processo de negócio seja concluído corretamente, mesmo quando algum serviço interno apresentar erro temporário. Esse controle centralizado de lógica e de sequência de chamadas é fundamental para garantir a robustez e a confiabilidade de processos complexos que envolvem várias etapas.
        vr_en: |
          The facade acts as an abstraction layer that unifies multiple back-end services into a single access point for the client. Instead of the consumer having to know different endpoints and data formats for each service they make just one call to the facade which then invokes all required services consolidates their responses and returns an integrated coherent result. In this way the client interacts with a uniform simple interface while the complexity of multiple internal services remains hidden and independent of internal changes. Orchestration on the other hand is responsible for coordinating the entire workflow of operations among those unified services. It determines the exact sequence in which each service must be called applies all business rules governing each step of the process and manages failures through automatic retry attempts or alternative contingency paths. Orchestration also gathers execution metrics monitors transaction status and ensures that the business process completes successfully even if an internal service experiences a temporary error. This centralized control of logic and call sequence is essential to guarantee the robustness and reliability of complex processes involving multiple steps.
    - custom:
        vr_pt: |
          A fachada fornece ao cliente uma interface única, estável e consistente, independentemente da quantidade e da diversidade de serviços internos que existam no sistema. Mesmo que os serviços sejam alterados, substituídos ou ampliados, o consumidor continua a fazer apenas uma chamada simples para a fachada, sem precisar conhecer detalhes como o caminho, o formato de dados ou os parâmetros de cada serviço de back-end. Dessa forma, a interface fica sempre previsível e amigável, reduzindo a curva de aprendizado e o risco de erros na integração. Já a orquestração organiza de forma centralizada o consumo desses mesmos serviços internos e toda a lógica de negócio que conecta e transforma os dados. Ela define a ordem exata em que cada serviço deve ser invocado, aplica regras de negócio complexas em cada etapa, trata falhas com tentativas automáticas e opções de contingência, e consolida os resultados em um fluxo coerente. Ao separar claramente a simplificação do acesso, que é papel da fachada, da coordenação de processos, que é papel da orquestração, o sistema se torna muito mais flexível diante de mudanças e mais resiliente a falhas, garantindo continuidade de serviço mesmo em situações inesperadas.
        vr_en: |
          The facade provides the client with a single stable and consistent interface regardless of how many and how diverse the internal services are. Even if those services are changed replaced or expanded the consumer still makes just one simple call to the facade without needing to know details such as the endpoint path data format or parameters of each back-end service. In this way the interface remains predictable and user friendly reducing the learning curve and the risk of integration errors. Orchestration on the other hand centrally manages the consumption of those same internal services and all the business logic that connects and transforms the data. It defines the exact sequence in which each service must be invoked enforces complex business rules at each step handles failures with automatic retry attempts and fallback options and consolidates the results into a coherent workflow. By clearly separating the responsibility of simplifying access, which belongs to the facade, from the responsibility of coordinating processes, which belongs to orchestration, the system becomes far more adaptable to change and more resilient to failures, ensuring service continuity even under unexpected conditions.
    - custom:
        vr_pt: |
          A fachada agrupa diversos serviços sob um único ponto de entrada por meio de um proxy unificado, simplificando a interação do cliente. Em vez de fazer múltiplas chamadas a serviços diferentes e lidar com formatos de resposta distintos, o consumidor envia apenas uma solicitação à fachada, que repassa internamente cada chamada necessária, consolida as respostas e devolve um resultado único e coerente. Isso reduz a complexidade do consumo, diminui a quantidade de chamadas e protege o cliente de mudanças internas nos serviços de back-end. A orquestração, por sua vez, controla toda a lógica de execução distribuída entre esses serviços agrupados pela fachada. Ela define a sequência precisa de invocações, aplica as regras de negócio em cada etapa, gerencia falhas por meio de retentativas automáticas e executa ações de contingência quando necessário para manter a integridade dos dados. A orquestração também monitora o progresso do fluxo, coleta métricas detalhadas e assegura que todo o processo de negócio seja concluído com eficiência e confiabilidade. Essa combinação de fachada e orquestração proporciona aos usuários e aos sistemas consumidores uma experiência de uso mais simples e robusta, unindo a facilidade de acesso de um único proxy à governança completa de processos complexos.
        vr_en: |
          The facade groups multiple services under a single entry point via a unified proxy, simplifying client interaction. Instead of making multiple calls to different services and handling distinct response formats, the consumer sends just one request to the facade, which internally forwards each necessary call consolidates the responses and returns a single coherent result. This reduces consumption complexity lowers the number of calls required and shields the client from internal changes in back-end services. Orchestration, on the other hand, controls all distributed execution logic among those services grouped by the facade. It determines the exact sequence of invocations applies business rules at each step handles failures through automatic retry attempts and executes contingency actions when needed to maintain data integrity. Orchestration also monitors the flow’s progress gathers detailed metrics and ensures that the entire business process completes efficiently and reliably. This combination of facade and orchestration delivers a simpler and more robust experience for users and consuming systems by pairing the ease of access of a single proxy with complete governance of complex workflows.
