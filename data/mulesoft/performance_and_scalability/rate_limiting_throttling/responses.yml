version: '3.1'
responses:
  utter_rate_limiting_throttling:
    - custom:
        vr_pt: |
          O controle de limite de chamadas, conhecido como rate limiting, estabelece um teto fixo para a quantidade máxima de requisições que podem ser processadas em um período de tempo determinado. Por exemplo, você pode definir que apenas dez chamadas sejam permitidas em cada segundo. Quando esse teto é alcançado, o sistema bloqueia qualquer requisição adicional até que o intervalo de tempo seja renovado, protegendo o serviço contra acesso excessivo e mantendo a estabilidade. Já o controle de fluxo controlado, chamado throttling, autoriza picos momentâneos de requisições acima do limite estabelecido, mas logo em seguida desacelera o ritmo das chamadas até retornar ao valor fixado. Dessa forma, o consumidor pode enviar rajadas de chamadas sem ter todas elas rejeitadas imediatamente, e o sistema regula automaticamente o tráfego para evitar sobrecarga prolongada. Essas duas técnicas combinadas garantem que as APIs permaneçam disponíveis mesmo em situações de alta demanda, protegendo o backend de quedas de desempenho. Você pode aplicar as regras de limite e de fluxo controlado de forma individual por usuário, por aplicação ou por chave de acesso, assegurando que cada consumidor utilize somente os recursos que lhe são permitidos e evitando impactos de picos extremos de uso.
        vr_en: |
          The call rate control known as rate limiting sets a fixed cap on the maximum number of requests that can be handled within a given time frame. For example, you might allow only ten calls per second. Once that cap is reached, the system blocks any further requests until the time window resets, protecting the service from excessive traffic and ensuring stability. The controlled flow mechanism called throttling, in contrast, permits short bursts of requests above the defined limit but then regulates the subsequent call rate back down to the set level. In this way, consumers can send bursts of calls without all of them being immediately rejected, and the system automatically smooths out the traffic to prevent sustained overload. Used together, these two techniques ensure that APIs remain available even under heavy load, safeguarding the backend from performance degradation. You can apply both rate limits and throttling rules individually by user, by application or by access key, ensuring that each consumer uses only the resources they are allowed and preventing extreme spikes from causing service interruptions.
    - custom:
        vr_pt: |
          Com o controle de limite de chamadas você estabelece a quantidade máxima de requisições que podem ser feitas em um intervalo de tempo determinado, por exemplo, dez chamadas por segundo. Quando esse limite é atingido, todas as requisições adicionais são bloqueadas até que o período seja renovado, garantindo que o sistema não fique sobrecarregado. O controle de fluxo controlado, chamado throttling, permite que ocorram rajadas curtas de chamadas acima do limite definido, mas em seguida reduz gradualmente a taxa de requisições até retornar ao ritmo permitido. Dessa forma, o consumidor consegue enviar um volume maior de chamadas em picos curtos sem todas elas serem rejeitadas, e o sistema regula automaticamente o tráfego para evitar quedas prolongadas de desempenho. Quando aplicados em conjunto, rate limiting e throttling mantêm o desempenho das APIs e a estabilidade geral do sistema, evitando que picos repentinos de acesso causem falhas, lentidão ou indisponibilidade. Você pode configurar essas políticas individualmente por usuário, por aplicativo ou por chave de API, garantindo que cada consumidor utilize apenas os recursos para os quais tenha permissão e que o ambiente permaneça seguro e responsivo.
        vr_en: |
          With call rate control you set the maximum number of requests that can be made within a given time frame, for example ten calls per second. When this limit is reached, any additional requests are blocked until the time window resets, ensuring the system does not become overloaded. The controlled flow mechanism, known as throttling, allows short bursts of calls above the defined limit but then gradually slows down the request rate until it returns to the permitted pace. This way, the consumer can send a higher volume of calls during brief spikes without all of them being rejected, and the system automatically smooths the traffic to prevent prolonged performance drops. When used together, rate limiting and throttling maintain API performance and overall system stability, preventing sudden access spikes from causing failures, slowdowns or unavailability. You can configure these policies individually by user, by application or by API key, ensuring each consumer uses only the resources they are allowed and that the environment remains secure and responsive.
    - custom:
        vr_pt: |
          O controle de limite de requisições, chamado rate limiting, impõe um teto rígido para a quantidade de chamadas que podem ser feitas em um intervalo de tempo. Por exemplo, você pode definir que apenas dez acessos sejam permitidos a cada segundo. Quando esse limite é atingido, todas as requisições adicionais são bloqueadas até que o próximo segundo comece. O controle de fluxo variável, chamado throttling, permite que ocorram picos rápidos de chamadas acima desse limite definido, mas depois reduz automaticamente a taxa de requisições até retornar ao ritmo permitido. Por exemplo, durante um pico breve, a API pode aceitar quinze chamadas em um curto momento, mas em seguida desacelera para dez chamadas por segundo. Essas duas técnicas trabalham juntas para proteger o servidor de origem contra sobrecarga e garantir que todos os clientes recebam respostas estáveis e dentro do esperado. Com rate limiting, você evita que o sistema seja inundado; com throttling, você oferece flexibilidade para lidar com picos sem rejeitar todas as requisições extras. Você pode aplicar essas políticas de forma individualizada por usuário, por aplicativo ou por chave de API, garantindo controle preciso e uma experiência de usuário consistente.
        vr_en: |
          Rate limiting enforces a strict ceiling on the number of calls that can be made within a time window. For example, you can set a limit of ten accesses per second. When that limit is reached, any additional requests are blocked until the next second begins. Throttling allows brief bursts of calls above the defined limit, then automatically slows the request rate back down to the allowed pace. For instance, during a short spike, the API might accept fifteen calls at once but then reduces to ten calls per second. Used together, these two techniques protect the backend server from overload and ensure all clients receive consistent and expected responses. Rate limiting prevents the system from being flooded, while throttling provides flexibility to handle sudden peaks without rejecting every extra request. You can apply these policies individually by user, by application or by API key, ensuring precise control and a consistent user experience.
    - custom:
        vr_pt: |
          A técnica de limitação de requisições, conhecida como rate limiting, impede qualquer chamada que ultrapasse um limite previamente estabelecido, por exemplo, apenas dez requisições em cada segundo. Sempre que esse teto é atingido, as requisições excedentes são automaticamente rejeitadas até que o intervalo seja reiniciado, garantindo que o sistema não seja sobrecarregado. O controle de fluxo variável, ou throttling, permite que ocorram rajadas breves de requisições acima desse limite, por exemplo, em momentos de pico curto, mas em seguida desacelera gradualmente as chamadas até retornar ao ritmo permitido de dez requisições por segundo. Dessa forma, o sistema absorve variações de tráfego sem bloqueios bruscos, mantendo a estabilidade. Você pode aplicar essas regras de forma personalizada para cada chave de API, cada usuário ou cada aplicação, definindo limites diferentes para cenários distintos. Essa combinação de limitação rígida e de fluxo adaptável controla com precisão o tráfego e garante alta disponibilidade e desempenho consistente, mesmo quando muitos consumidores acessam simultaneamente.
        vr_en: |
          The rate limiting technique blocks any request that exceeds a predefined ceiling, for example only ten calls per second. Whenever that ceiling is reached, excess requests are automatically rejected until the interval resets, ensuring that the system does not become overloaded. The throttling mechanism allows brief bursts of requests above that ceiling, for instance during short traffic peaks, but then gradually slows down the calls until it returns to the allowed pace of ten calls per second. In this way, the system absorbs traffic variations without abrupt rejections, maintaining stability. You can apply these rules in a customized way for each API key, user or application, setting different limits for different scenarios. This combination of strict limiting and adaptive flow control precisely manages traffic and ensures high availability and consistent performance even when many consumers access the service at the same time.
    - custom:
        vr_pt: |
          As políticas de limitação de chamadas e de controle de rajadas servem para gerenciar o volume de requisições que chegam às suas APIs e evitar sobrecarga. Na limitação de chamadas você define um teto fixo para o número de solicitações em um intervalo de tempo, por exemplo dez requisições por segundo. Quando esse limite é atingido, todas as chamadas adicionais são bloqueadas até o próximo segundo. Já o controle de rajadas permite que ocorram picos momentâneos acima desse teto, concedendo uma margem de tolerância para variações de tráfego. Durante a rajada, as solicitações são atendidas normalmente, mas em seguida o sistema reduz gradualmente a taxa de chamadas até regressar ao limite configurado. Essas duas abordagens trabalham juntas para proteger o servidor de lentidão e quedas de desempenho. A limitação rígida impede que picos prolongados derrubem o sistema, enquanto o controle de rajadas garante que momentos curtos de alta demanda sejam absorvidos sem rejeições abruptas. Com essas políticas aplicadas, sua API se mantém estável, com tempo de resposta consistente e alta disponibilidade para todos os consumidores.
        vr_en: |
          The policies of rate limiting and burst control are used to manage the volume of requests arriving at your APIs and prevent overload. In rate limiting you set a fixed ceiling for the number of calls within a time frame, for example ten requests per second. When that ceiling is reached, all additional calls are blocked until the next second. Burst control, on the other hand, allows temporary peaks above that ceiling, giving a tolerance margin for traffic variations. During the burst period requests are served normally, but then the system gradually slows down the request rate until it returns to the configured ceiling. These two approaches work together to protect the server from slowdowns and performance failures. The strict ceiling prevents prolonged spikes from crashing the system, while burst control ensures that short moments of high demand are absorbed without abrupt rejections. With these policies in place your API remains stable, with consistent response times and high availability for all consumers.
    - custom:
        vr_pt: |
          No rate limiting você estabelece um teto rígido para o número de chamadas em cada intervalo de tempo, por exemplo dez requisições a cada segundo. Quando esse teto é atingido, todas as chamadas adicionais são bloqueadas imediatamente até que comece o próximo intervalo. Já o throttling permite que ocorram pequenas variações acima desse teto, aceitando rajadas momentâneas de requisições para acomodar picos de acesso inesperados. Durante esse período de rajada, as solicitações são processadas normalmente, mas em seguida o sistema reduz gradualmente a frequência de atendimento até retornar ao limite configurado. Quando usamos rate limiting e throttling juntos, estamos protegendo a API de duas formas. A limitação rígida impede que o sistema receba um volume excessivo de chamadas por muito tempo, enquanto o controle de rajadas garante que pequenos picos sejam absorvidos sem interrupção brusca do serviço. Dessa forma, sua API continua rápida, estável e disponível mesmo em momentos de uso intenso.
        vr_en: |
          With rate limiting you establish a hard ceiling for the number of calls in each time interval, for example ten requests per second. When that ceiling is reached all additional calls are immediately blocked until the next interval begins. Throttling, on the other hand, allows small variations above that ceiling, accepting temporary bursts of requests to accommodate unexpected spikes in traffic. During that burst period requests are processed normally, but then the system gradually slows down the rate of handling until it returns to the configured limit. By using both rate limiting and throttling together you protect the API in two ways. The hard ceiling prevents the system from receiving an excessive volume of calls for an extended time, while burst control ensures that small peaks are absorbed without abrupt service interruption. In this way your API remains fast, stable and available even during intense usage periods.
    - custom:
        vr_pt: |
          No rate limiting você define um número máximo de chamadas que podem ser feitas dentro de um intervalo de tempo, por exemplo dez chamadas por segundo. Quando o limite é alcançado, novas requisições são bloqueadas até que se inicie o próximo intervalo, garantindo que o sistema não receba mais pedidos do que pode processar de forma consistente. O throttling permite que ocorram picos curtos de tráfego acima desse limite rígido, aceitando um pequeno número extra de requisições para acomodar variações temporárias na demanda. Logo em seguida, o throttle reduz gradualmente a taxa de atendimento das solicitações adicionais até retornar ao limite configurado. Ao aplicar rate limiting e throttling por usuário, por aplicativo ou por chave de API, você cria camadas de proteção que evitam sobrecarga e mantêm a API sempre disponível. O rate limiting impede que um único consumidor consuma todos os recursos, enquanto o throttling permite lidar com rajadas momentâneas sem interromper o serviço de forma abrupta. Essa combinação mantém a estabilidade e a rapidez da API, mesmo em momentos de acesso intenso.
        vr_en: |
          With rate limiting you set a maximum number of calls that can be made within a given time interval, for example ten calls per second. When that limit is reached new requests are blocked until the next interval begins, ensuring the system does not receive more requests than it can handle consistently. Throttling allows short traffic spikes above that hard limit by accepting a small number of extra requests to accommodate temporary demand bursts. Immediately afterward, the throttle gradually slows down the rate of processing for those additional requests until it returns to the configured limit. By applying rate limiting and throttling per user, per application or per API key, you create protective layers that prevent overload and keep the API always available. Rate limiting stops a single consumer from using all the resources, while throttling lets you handle momentary bursts without abruptly cutting off service. This combination keeps the API stable and fast even during intense access periods.
    - custom:
        vr_pt: |
          No rate limiting você bloqueia automaticamente qualquer requisição que ultrapasse o limite pré-definido, por exemplo dez chamadas por segundo. Isso garante que não haja mais chamadas do que o sistema pode suportar, mantendo a estabilidade dos serviços. O throttling permite que ocorram rajadas rápidas de chamadas acima desse limite rígido, aceitando alguns pedidos extras para acomodar variações repentinas na demanda. Em seguida, o throttle reduz gradualmente a velocidade de atendimento das requisições adicionais até retornar ao ritmo permitido. Com essa combinação você mantém o equilíbrio entre performance e disponibilidade da API. O rate limiting impede que qualquer consumidor monopolize os recursos, enquanto o throttling oferece flexibilidade para lidar com picos de carga sem interromper o serviço de forma abrupta. Assim, mesmo em momentos de grande movimento, sua API continua funcionando de forma estável e rápida.
        vr_en: |
          With rate limiting you automatically block any request that exceeds the predefined limit, for example ten calls per second. This ensures that there are never more calls than the system can handle, keeping services stable. Throttling allows fast bursts of calls above that hard limit, accepting a few extra requests to accommodate sudden demand spikes. Then the throttle gradually slows down the processing rate of those additional requests until it returns to the allowed pace. By combining these two techniques you balance API performance and availability. Rate limiting prevents any single consumer from monopolizing resources, while throttling offers flexibility to handle load spikes without abruptly cutting off service. Thus, even during heavy traffic periods, your API remains stable and responsive.
    - custom:
        vr_pt: |
          Quando você aplica o rate limiting, todas as requisições que ultrapassam o limite configurado são bloqueadas imediatamente. Por exemplo, se você definir um máximo de dez chamadas por segundo, a décima primeira chamada dentro desse mesmo segundo não chegará ao servidor e receberá uma resposta de erro informando que o limite foi atingido. Já o throttling permite que ocorram picos controlados acima desse limite rígido. Em vez de bloquear imediatamente a décima primeira chamada, o sistema aceita esse pico de tráfego, mas começa a reduzir gradualmente a velocidade de processamento das requisições extras até retornar ao ritmo permitido. Combinando rate limiting e throttling, você evita que muitos pedidos simultâneos sobrecarreguem o servidor e causem lentidão ou indisponibilidade. O rate limiting protege o sistema contra acessos abusivos, enquanto o throttling assegura que pequenos estouros de demanda possam ser atendidos com um efeito de desaceleração suave, mantendo a qualidade e a rapidez do serviço para todos os usuários.
        vr_en: |
          When you apply rate limiting, any request that exceeds the configured limit is blocked immediately. For example, if you set a maximum of ten calls per second, the eleventh call within that same second will not reach the server and will receive an error response indicating the limit has been reached. Throttling, on the other hand, allows controlled spikes above that hard limit. Instead of blocking the eleventh call outright, the system accepts the burst of traffic but then gradually slows down the processing rate of the extra requests until it returns to the allowed pace. By combining rate limiting and throttling, you prevent a flood of simultaneous requests from overwhelming the server and causing slowdowns or outages. Rate limiting protects the system from abusive access, while throttling ensures that small bursts of demand can still be handled with a smooth deceleration effect, preserving service quality and speed for all users.
    - custom:
        vr_pt: |
          O rate limiting aplica um bloqueio rígido sempre que o número máximo de chamadas permitido é alcançado. Por exemplo, se o limite for dez requisições por segundo, a décima primeira chamada nesse mesmo segundo será imediatamente rejeitada e receberá uma resposta de erro indicando que o limite foi atingido. O throttling, por sua vez, permite que ocorram picos momentâneos de chamadas acima desse limite rígido, mas impõe um retardo nas requisições seguintes até que o ritmo de chamadas volte ao normal. Em vez de bloquear a décima primeira chamada, o throttling aceita esse estouro temporário, mas começa a desacelerar o atendimento das chamadas excedentes até que a taxa retorne ao valor configurado. Ao definir regras de rate limiting e de throttling específicas para cada cliente, usuário ou chave de API, você garante que os consumidores possam usufruir de pequenas variações de demanda sem causar sobrecarga, ao mesmo tempo em que protege o sistema contra acessos abusivos e mantém a disponibilidade e a performance de forma consistente, mesmo em situações de pico inesperado.
        vr_en: |
          Rate limiting enforces a hard block whenever the maximum allowed number of calls is reached. For example, if the limit is ten requests per second, the eleventh call in that same second will be immediately rejected with an error response indicating that the limit has been reached. Throttling, on the other hand, allows momentary peaks of calls above that hard limit but then imposes a delay on subsequent requests until the call rate returns to the normal level. Instead of blocking the eleventh call outright, throttling accepts the temporary spike but slows down the processing of the extra calls until the rate falls back to the configured value. By configuring rate limiting and throttling rules specifically for each client, user or API key, you ensure that consumers can handle small demand variations without causing overload, while protecting the system from abusive access and maintaining consistent availability and performance even during unexpected traffic spikes.
